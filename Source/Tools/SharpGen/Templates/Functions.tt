<#@ include file="Header.tt" #>

namespace <#= Namespace.Name #> {

#pragma warning disable 419
#pragma warning disable 1587
#pragma warning disable 1574


<#
foreach (var sharpFunctionGroup in Namespace.Classes)
{
		foreach (var docItem in sharpFunctionGroup.DocItems) {
#>
        /// <#= docItem #>	
<#		}#>
    <#= sharpFunctionGroup.VisibilityName #> partial class <#= sharpFunctionGroup.Name #> {   
<#

	// --------------------------------------------------------------------------------------------------
	// Handle Inner Constants
	// --------------------------------------------------------------------------------------------------
	foreach (var sharpConstant in sharpFunctionGroup.Variables) {		
#>        
        /// <summary>Constant <#= sharpConstant.Name #>.</summary>
        /// <unmanaged><#= sharpConstant.CppElementName #></unmanaged>
        <#= sharpConstant.VisibilityName #><#= sharpConstant.TypeName #> <#= sharpConstant.Name #> = <#= sharpConstant.Value #>;
<#
	}

	// Prepare for Custom DLL import
	var dllNames = sharpFunctionGroup.GetFunctionDllNames();
	
	if (dllNames.Count > 0) {		
#>
		/// <summary>
		/// DLLs loaders
		/// </summary>
<#
	
		for(int i = 0; i < dllNames.Count; i++) {
#>			
		private static IntPtr DllHandle<#= i #>_;
		private static IntPtr DllHandle<#= i #> {
			get {
				if (DllHandle<#= i #>_ == IntPtr.Zero) {
		            DllHandle<#= i #>_ = SharpDX.Utilities.LoadLibrary(<#= dllNames[i] #>);
				}
				return DllHandle<#= i #>_;
			}
		}
<#
		}
	}
			
	foreach (var sharpFunction in sharpFunctionGroup.Functions) {
		int indexDll = dllNames.IndexOf(sharpFunction.DllName);			
		ProcessMethod(sharpFunction);
		if (sharpFunction.UseDllImport) {
			var interopFunction = sharpFunction.Interop;
#>
#if !W8CORE
		[System.Security.SuppressUnmanagedCodeSecurityAttribute]
#endif
#if WP8
        private unsafe delegate <#= interopFunction.ReturnType.TypeName #> <#= sharpFunction.CppElementName #>Delegate(<#
		for(int i = 0; i < interopFunction.ParameterTypes.Count; i++) {
			if (i > 0) {#>,<#}
#><#= interopFunction.ParameterTypes[i].TypeName #> arg<#= i #><#
		}
#>);
        private static <#= sharpFunction.CppElementName #>Delegate <#= sharpFunction.CppElementName #>__;
        private unsafe static <#= sharpFunction.CppElementName #>Delegate <#= sharpFunction.CppElementName #>_
        {
            get
            {
                if (<#= sharpFunction.CppElementName #>__ == null)
                    <#= sharpFunction.CppElementName #>__ = (<#= sharpFunction.CppElementName #>Delegate)Marshal.GetDelegateForFunctionPointer(new IntPtr(SharpDX.WP8.Interop.<#= sharpFunction.CppElementName #>()), typeof (<#= sharpFunction.CppElementName #>Delegate));
                return <#= sharpFunction.CppElementName #>__;
            }
        }
#else
        [DllImport(<#= sharpFunction.DllName #>, EntryPoint = "<#= sharpFunction.CppElementName #>", CallingConvention = CallingConvention.<#= sharpFunction.CallingConvention #>)]
        private unsafe static extern <#= interopFunction.ReturnType.TypeName #> <#= sharpFunction.CppElementName #>_(<#
		for(int i = 0; i < interopFunction.ParameterTypes.Count; i++) {
			if (i > 0) {#>,<#}
#><#= interopFunction.ParameterTypes[i].TypeName #> arg<#= i #><#
		}
#>);
#endif
<#
		}
		else if (indexDll >= 0)
		{
#>
        private static IntPtr <#= sharpFunction.CppElementName #>Field_;
        private static IntPtr <#= sharpFunction.CppElementName #>_
        {
            get
            {
                if (<#= sharpFunction.CppElementName #>Field_ == IntPtr.Zero)
                {
                    <#= sharpFunction.CppElementName #>Field_ = SharpDX.Utilities.GetProcAddress(DllHandle<#= indexDll #>, "<#= sharpFunction.CppElementName #>");
                }
                return <#= sharpFunction.CppElementName #>Field_;
            }
        }		
<#		
		}
	}
#>
    }
<#
} // Foreach Namespace.FunctionGroups
#>
}
<#@ include file="Method.tt" #>

