<#+	
// Copyright (c) 2010-2014 SharpDX - Alexandre Mutel
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.	

	private void ProcessMethodCalli(CsMethod method) {
		// Number of parameters
		var maxParam = method.ParameterCount;		
		// IF Function, else method
		if (method is CsFunction) {
			if (method.UseDllImport) {
#><#= method.CastStart #><#= method.CppElementName #>_(<#+
			} else {
#><#= method.CastStart #><#= method.Assembly.QualifiedName #>.LocalInterop.<#= method.Interop.Name #>(<#+
			}
			if (method.IsReturnStructLarge) {#>(void*)&__result__<#+ if (maxParam > 0) {#>, <#+} }

		} else {
#><#= method.CastStart #><#= method.Assembly.QualifiedName #>.LocalInterop.<#= method.Interop.Name #>(_nativePointer<#+
			if (method.IsReturnStructLarge) {#>,(void*)&__result__<#+}				
			if (maxParam > 0) {#>, <#+}
		}
		for(int i  = 0; i < maxParam; i++) {
			var param = method.Parameters[i];
			if (i>0) {#>, <#+}
			#><#= param.CallName #><#+				
		}
		if (method is CsFunction) {
			if (!method.UseDllImport) {
				if (maxParam > 0 || method.IsReturnStructLarge) {#>, <#+}
				#>(void*)<#= method.CppElementName #>_<#+
			}
		} else {
            if (method.CustomVtbl)
			{
			#>,((void**)(*(void**)_nativePointer))[<#= method.Name #>__vtbl_index]<#+
			}
			else
			{
			#>,((void**)(*(void**)_nativePointer))[<#= method.Offset #>]<#+
			}
		}
		#>)<#= method.CastEnd #>;		
<#+
	}

	private void ProcessMethodCalliX86Jit(CsMethod method) {
		// Number of parameters
		var maxParam = method.ParameterCount;		
		// IF Function, else method
		if (method is CsFunction) {
#><#= method.CastStart #><#= method.Assembly.QualifiedName #>.LocalInterop.<#= method.Interop.Name #>((void*)<#= method.CppElementName #>_, 0<#+
		} else {
#><#= method.CastStart #><#= method.Assembly.QualifiedName #>.LocalInterop.<#= method.Interop.Name #>(&__ptr__, ((void**)(*(void**)_nativePointer))[<#= method.Offset #>], &__ptr__ <#+
		}
		if (maxParam > 0) {#>, <#+}

		// For ClrCall to StdCall, reverse order of pushed parameters in order to have right to left parameters		
		for(int i  = maxParam-1; i >=0; i--) {
			var param = method.Parameters[i];
			if (i < (maxParam-1)) {#>,<#+}
			#><#= param.CallName #><#+				
		}
		if (method is CsFunction) {
			if (maxParam > 0 && method.IsReturnStructLarge) {#>, <#+}
			if (method.IsReturnStructLarge) {#>(void*)&__result__<#+}				
		} else {
			if (method.IsReturnStructLarge) {#>,(void*)&__result__<#+}				
			#>,_nativePointer<#+
		}
		#>)<#= method.CastEnd #>;		
<#+
	}
	
	public void ProcessMethod(CsMethod method) {
		
	// ------------------------------------------------------------------------------------------------------------
	// Output methods
	// ------------------------------------------------------------------------------------------------------------			
#>
        
<#+	
		// Output custom vtbil if specified
		if (method.CustomVtbl)
		{
#>        private int <#= method.Name #>__vtbl_index = <#= method.Offset #>;
<#+		
		}
		foreach (var docItem in method.DocItems) {
#>
        /// <#= docItem #>	
<#+			
		}
		if (method.Hidden) {
        	#>        /* <#+
		} else {
        	#>        <#+
		}
		#><#= method.VisibilityName #><#= method.PublicReturnTypeQualifiedName #> <#= method.Name #>(<#+
		int i = 0;
		int maxParam = method.PublicParameterCount;
		foreach (var param in method.PublicParameters) {
			#><#= param.ParamName #><#+	
			if (param.DefaultValue != null) {#> = <#= param.DefaultValue #><#+}
			if ((i+1)<maxParam) {#>, <#+}
			i++;
		}
#>)<#+
		if (method.Hidden) {
			#> */

<#+
        	return;
		}
		// Else Open Body
#> {
            unsafe {
<#+			
				// ---------------------------------------------------------------------------------------------------
				// Start Initializing Parameters out
				// ---------------------------------------------------------------------------------------------------
				foreach (var param in method.Parameters) {
					// Handle parameters used as return type
					if (param.IsUsedAsReturnType) {
						if (param.IsArray) {#>
                <#= param.PublicType.QualifiedName #>[] <#= param.Name #>;
<#+
						} else {#>
                <#= param.PublicType.QualifiedName #> <#= param.Name #>;
<#+						}
					}
					
					// Handle In-Optional
					if (param.IsArray && param.IsValueType && !param.HasNativeValueType) {
						if (param.IsOptionnal) {#>
                <#= param.PublicType.QualifiedName #>[] <#= param.TempName #>_ = <#= param.Name #>;
<#+						} 
						continue;
					}						
					// Does the structure has a Native marshalling?
					if (param.HasNativeValueType) {
						// If Native Marshalling and array, then marshal from managed array to a native managed array
						if (param.IsArray) {
							if (param.IsOptionnal) {#>
                <#= param.PublicType.QualifiedName #>.__Native[] <#= param.TempName #>_ = (<#= param.Name #> == null)? null : new <#= param.PublicType.QualifiedName #>.__Native[<#= param.Name #>.Length];
<#+								if (param.IsRefIn) {#>
				if (<#= param.Name #> != null)
                for (int i = 0; i < <#= param.Name #>.Length; i++)
                    <#= param.Name #>[i].__MarshalTo(ref <#= param.TempName #>_[i]);				
<#+								}
							} else {#>
                <#= param.PublicType.QualifiedName #>.__Native[] <#= param.TempName #>_ = new <#= param.PublicType.QualifiedName #>.__Native[<#= param.Name #>.Length];
<#+								if (param.IsRefIn) {#>
                for (int i = 0; i < <#= param.Name #>.Length; i++)
                    <#= param.Name #>[i].__MarshalTo(ref <#= param.TempName #>_[i]);				
<#+								}
							}
						} else {#>
                var <#= param.TempName #> = <#= ((CsStruct)param.PublicType).GetConstructor() #>;
<#+							if ((param.IsRefIn || param.IsRef || param.IsIn) && param.HasNativeValueType) {
								if (param.IsStaticMarshal) {#>
                <#= param.PublicType.QualifiedName #>.__MarshalTo(ref <#= param.Name #>, ref <#= param.TempName #>);
<#+							
								} else {
									if (param.IsOptionnal && param.IsStructClass) {#>
                if (<#= param.Name #> != null)
<#+									}#>
                <#= param.Name #>.__MarshalTo(ref <#= param.TempName #>);
<#+
								} 
							}
						}						
					} else if (param.IsOut) {
						if (param.IsValueType && !param.IsPrimitive) {#>
                <#= param.Name #> = new <#= param.PublicType.QualifiedName #>();
<#+						} else if ( param.IsBoolToInt && !param.IsArray ) {#>
                int <#= param.TempName #>;
<#+						} else if (param.IsComObject) {
							if (param.IsArray) {
								if (param.IsOptionnal) {#>
                IntPtr* <#= param.TempName #> = stackalloc IntPtr[<#= param.Name #> == null ? 0 : <#= param.Name #>.Length];
<#+	
								} else {#>
                IntPtr* <#= param.TempName #> = stackalloc IntPtr[<#= param.Name #>.Length];
<#+								}
							} else {#>
                IntPtr <#= param.TempName #> = IntPtr.Zero;
<#+
							}
						}
					} else if (param.IsArray) {
						// Handle Array Of Interface [In]
						if (param.IsComObject) {
							if (param.IsIn && param.IsOptionnal) {#>
                IntPtr* <#= param.TempName #> = (IntPtr*)0;
                if ( <#= param.Name #> != null ) {
                    IntPtr* <#= param.TempName #>_ = stackalloc IntPtr[<#= param.Name #>.Length];
                    <#= param.TempName #> = <#= param.TempName #>_;
                    for (int i = 0; i < <#= param.Name #>.Length; i++)                        
                        <#= param.TempName #>[i] =  (<#= param.Name #>[i] == null)? IntPtr.Zero : <#= param.Name #>[i].NativePointer;
                }
<#+									
							} else {#>
                IntPtr* <#= param.TempName #> = stackalloc IntPtr[<#= param.Name #>.Length];
<#+								if (param.IsIn) {#>
                for (int i = 0; i < <#= param.Name #>.Length; i++)
                    <#= param.TempName #>[i] =  (<#= param.Name #>[i] == null)? IntPtr.Zero : <#= param.Name #>[i].NativePointer;			
<#+								}
							}
						}
					// Handle Input String 
					} else if (param.IsString && !param.IsWideChar) {#>
                IntPtr <#= param.TempName #> = Utilities.StringToHGlobalAnsi(<#= param.Name #>);
<#+					} else if ( param.IsRefIn && param.IsValueType && param.IsOptionnal) {#>
                <#= param.PublicType.QualifiedName #> <#= param.TempName #>;
                if (<#= param.Name #>.HasValue)
                    <#= param.TempName #> = <#= param.Name #>.Value;				
<#+						
					}

				} 
				// End Of initializing parameter out
				// ---------------------------------------------------------------------------------------------------

				/*
				if (!(method is CsFunction)) {			
#if JIT_x86
				void* __ptr__;
#endif				
				}
				*/
				
				// ---------------------------------------------------------------------------------------------------
				// Pre-Declare Return Type
				// ---------------------------------------------------------------------------------------------------
				if (method.HasReturnType) {#>
                <#= method.ReturnType.PublicType.QualifiedName #> __result__;
<#+				}
				
				// ---------------------------------------------------------------------------------------------------
				// Handle fixed parameters
				// ---------------------------------------------------------------------------------------------------
				foreach (var param in method.Parameters) {
					if (param.IsArray && param.IsValueType) {
						if (param.HasNativeValueType || param.IsOptionnal) {#>
                fixed (void* <#= param.TempName #> = <#= param.TempName #>_)
<#+	
						} else {#>
                fixed (void* <#= param.TempName #> = <#= param.Name #>)
<#+						}						
						PushIndent("    ");
					} else if (param.IsFixed && param.IsValueType && !param.HasNativeValueType && !param.IsUsedAsReturnType) {#>
                fixed (void* <#= param.TempName #> = &<#= param.Name #>)
<#+						PushIndent("    ");
					// Handle Input String 
					} else if (param.IsString && param.IsWideChar) {#>
                fixed (char* <#= param.TempName #> = <#= param.Name #>)
<#+						PushIndent("    ");
					}						
				}

									
				// ---------------------------------------------------------------------------------------------------
				// Perform method call to Interop.Calli*
				// ---------------------------------------------------------------------------------------------------
				if (method.HasReturnType && !method.IsReturnStructLarge) {#>
                __result__= 
				<#+
				} else {
#>                <#+
				}
//#if JIT_x86
//				ProcessMethodCalliX86Jit(method);
//#else
				ProcessMethodCalli(method);
//#endif
				// ---------------------------------------------------------------------------------------------------
				// Unindent fixed parameters
				// ---------------------------------------------------------------------------------------------------
				foreach (var param in method.Parameters) {
					if ((param.IsArray && param.IsValueType) || (param.IsFixed && param.IsValueType && !param.HasNativeValueType)) 
						PopIndent();
				}				
				
				// ---------------------------------------------------------------------------------------------------
				// Post process on output parameters and free on Native input parameters
				// ---------------------------------------------------------------------------------------------------
				foreach (var param in method.Parameters) {
					if (param.IsOut) {
						if (param.HasNativeValueType) {
								if (param.IsArray) {#>
                for (int i = 0; i < <#= param.Name #>.Length; i++)
                    <#= param.Name #>[i].__MarshalFrom(ref <#= param.TempName #>_[i]);				
<#+								} else {#>
                <#= param.Name #> = new <#= param.PublicType.QualifiedName #>();
<#+									if (param.IsStaticMarshal) {#>
                <#= param.PublicType.QualifiedName #>.__MarshalFrom(ref <#= param.Name #>, ref <#= param.TempName #>);
<#+									} else {#>
                <#= param.Name #>.__MarshalFrom(ref <#= param.TempName #>);
<#+									}
								}
						} else if (param.IsComObject ) {
							var paramInterface = param.PublicType as CsInterface;
							if (param.IsArray) {
								if (param.IsOptionnal) {#>
                if (<#= param.Name #> != null)
<#+								}
#>                for (int i = 0; i < <#= param.Name #>.Length; i++)
                    <#= param.Name #>[i] = (<#= param.TempName #>[i] == IntPtr.Zero)?null:new <#= paramInterface.NativeImplem.QualifiedName #>(<#= param.TempName #>[i]);	
<#+	
							} else {
								if (param.IsFastOut) {#>
                ((<#= paramInterface.NativeImplem.QualifiedName #>)<#= param.Name #>).NativePointer = <#= param.TempName #>;
<#+								} else {#>
                <#= param.Name #>= (<#= param.TempName #> == IntPtr.Zero)?null:new <#= paramInterface.NativeImplem.QualifiedName #>(<#= param.TempName #>);	
<#+								}
							}
						} else if (param.IsBoolToInt && !param.IsArray) {#>
                <#= param.Name #> = <#= param.TempName #> != 0;
<#+						}						
					// Handle Input String 
					} else if (param.IsString && !param.IsWideChar) {#>
                Marshal.FreeHGlobal(<#= param.TempName #> );
<#+						
					} else if (param.HasNativeValueType) {
						if (param.IsArray) {
							if (param.IsOptionnal) {#>
                if (<#= param.Name #> != null )															
<#+							}#>
                for (int i = 0; i < <#= param.Name #>.Length; i++)
                    <#= param.Name #>[i].__MarshalFree(ref <#= param.TempName #>_[i]);
<#+						} else {
							if (param.IsStaticMarshal) {
								if (param.IsRef) {
#>                <#= param.PublicType.QualifiedName #>.__MarshalFrom(ref <#= param.Name #>, ref <#= param.TempName #>);
<#+								}
#>                <#= param.PublicType.QualifiedName #>.__MarshalFree(ref <#= param.Name #>, ref <#= param.TempName #>);
<#+							} else {
								if (param.IsRef) {
#>                <#= param.Name #>.__MarshalFrom(ref <#= param.TempName #>);
<#+								}
								if (param.IsOptionnal) {#>
                if (<#= param.Name #> != null)
<#+								}

#>                <#= param.Name #>.__MarshalFree(ref <#= param.TempName #>);
<#+							}
						}
					}
				}

				// ---------------------------------------------------------------------------------------------------
				// Return value if any
				// ---------------------------------------------------------------------------------------------------
				if (method.HasPublicReturnType) {
					if ((method.ReturnType.PublicType.Name == Global.Name +".Result") && method.CheckReturnType) {#>
                __result__.CheckError();
<#+					}
					if (method.HasReturnTypeParameter || method.ForceReturnType || !method.HideReturnType) {#>
                return <#= method.ReturnName #>;
<#+					}
				}
#>            }
        }
<#+
	}
#>