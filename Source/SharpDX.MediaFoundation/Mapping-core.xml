<?xml version="1.0" encoding="utf-8"?>
<!--
// Copyright (c) 2010-2012 SharpDX - Alexandre Mutel
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
-->
<config id="sharpdx-mediafoundation" xmlns="urn:SharpGen.Config">
  <depends>sharpdx-core</depends>

  <ifdef name="DIRECTX11_1">
    <depends>sharpdx-dxgi</depends>
  </ifdef>

  <ifndef name="DIRECTX11_1">
    <depends>sharpdx-direct3d9</depends>
  </ifndef>

  <namespace>SharpDX.MediaFoundation</namespace>
  <assembly>SharpDX.MediaFoundation</assembly>

  <ifndef name="WP8">
    <include file="evr.h" attach="true">
      <pre>
        #define __AUDIODEFS_INCLUDED__
      </pre>
    </include>

    <ifndef name="DIRECTX11_1">
      <include file="evr9.h" attach="true"/>
    </ifndef>

    <include file="mfmp2dlna.h" attach="true"/>
    <include file="mfplay.h" attach="true"/>
    <include file="mfreadwrite.h" attach="true"/>
    <include file="uuids.h" attach="true"/>
    <include file="wmcontainer.h" attach="true"/>
  </ifndef>

  <include file="mfapi.h" attach="true"/>
  <include file="mfidl.h" attach="true"/>
  <include file="mfobjects.h" attach="true"/>
  <include file="mftransform.h" attach="true"/>
  <include file="mediaobj.h" attach="true"/>
  <ifdef name="DIRECTX11_1">
    <include file="mfmediaengine.h" attach="true"/>
  </ifdef>

  <context-set id="mediafoundation-all">
    <context>sharpdx-mediafoundation</context>
    <context>sharpdx-mediafoundation-ext</context>
    <context>evr</context>
    <context>evr9</context>
    <context>mfapi</context>
    <context>mfmp2dlna</context>
    <context>mfidl</context>
    <context>mfobjects</context>
    <context>mfplay</context>
    <context>mfreadwrite</context>
    <context>mftransform</context>
    <context>mfmediaengine</context>
    <context>wmcontainer</context>
    <context>uuids</context>
  </context-set>
  
  <extension>
    <context id="mediafoundation-all"/>
    
    <define struct="SharpDX.MediaFoundation.Mpeg1VideoInformation" sizeof="32" />
    <define struct="SharpDX.MediaFoundation.Mpeg2VideoInformation" sizeof="32" />
    <define struct="SharpDX.MediaFoundation.VideoInformationHeader2" sizeof="32" />
    <define enum="SharpDX.MediaFoundation.ResourceCharacteristics" sizeof="4" />

    <!--
    // *****************************************************************
    // MediaFoundation Attributes
    // *****************************************************************
    -->
    <create visibility="public static" class="AsfProfileAttributeKeys" />
    <create visibility="public static" class="AsfSplitterAttributeKeys" />
    <create visibility="public static" class="AsfStreamConfigAttributeKeys" />
    <create visibility="public static" class="AudioRendererAttributeKeys" />
    <create visibility="public static" class="ByteStreamAttributeKeys" />
    <create visibility="public static" class="CaptureDeviceAttributeKeys" />

    <ifdef name="DIRECTX11_1">
      <create visibility="public static" class="CaptureEngineAttributeKeys" />
      <create visibility="public static" class="DeviceStreamAttributeKeys" />
      <create visibility="public static" class="MediaAttributeKeys" />
      <create visibility="public static" class="MediaEngineAttributeKeys" />
      <create visibility="public static" class="Mpeg4MediaSinkAttributeKeys" />
      <create visibility="public static" class="NaluAttributeKeys" />
      <create visibility="public static" class="ProtectionAttributeKeys" />

      <const from-guid="MF_CAPTURE_ENGINE_D3D_MANAGER" class="SharpDX.MediaFoundation.CaptureEngineAttributeKeys" type="MediaAttributeKey&lt;SharpDX.ComObject&gt;" name="D3DManager">new MediaAttributeKey&lt;SharpDX.ComObject&gt;("$1")</const>
      <const from-guid="MF_CAPTURE_ENGINE_DECODER_MFT_FIELDOFUSE_UNLOCK_Attribute" class="SharpDX.MediaFoundation.CaptureEngineAttributeKeys" type="MediaAttributeKey&lt;SharpDX.ComObject&gt;" name="DecoderTransformFieldOfUseUnlockAttribute">new MediaAttributeKey&lt;SharpDX.ComObject&gt;("$1")</const>
      <const from-guid="MF_CAPTURE_ENGINE_DISABLE_DXVA" class="SharpDX.MediaFoundation.CaptureEngineAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="DisableDXVA">new MediaAttributeKey&lt;bool&gt;("$1")</const>
      <const from-guid="MF_CAPTURE_ENGINE_DISABLE_HARDWARE_TRANSFORMS" class="SharpDX.MediaFoundation.CaptureEngineAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="DisableHardwareTransforms">new MediaAttributeKey&lt;bool&gt;("$1")</const>
      <const from-guid="MF_CAPTURE_ENGINE_DISABLE_LOW_LATENCY" class="SharpDX.MediaFoundation.CaptureEngineAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="DisableLowLatency">new MediaAttributeKey&lt;bool&gt;("$1")</const>
      <const from-guid="MF_CAPTURE_ENGINE_ENCODER_MFT_FIELDOFUSE_UNLOCK_Attribute" class="SharpDX.MediaFoundation.CaptureEngineAttributeKeys" type="MediaAttributeKey&lt;SharpDX.ComObject&gt;" name="EncoderTransformFieldOfUseUnlockAttribute">new MediaAttributeKey&lt;SharpDX.ComObject&gt;("$1")</const>
      <const from-guid="MF_CAPTURE_ENGINE_EVENT_GENERATOR_GUID" class="SharpDX.MediaFoundation.CaptureEngineAttributeKeys" type="MediaAttributeKey&lt;System.Guid&gt;" name="EventGeneratorGuid">new MediaAttributeKey&lt;System.Guid&gt;("$1")</const>
      <const from-guid="MF_CAPTURE_ENGINE_EVENT_STREAM_INDEX" class="SharpDX.MediaFoundation.CaptureEngineAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="EventStreamIndex">new MediaAttributeKey&lt;int&gt;("$1")</const>
      <const from-guid="MF_CAPTURE_ENGINE_MEDIASOURCE_CONFIG" class="SharpDX.MediaFoundation.CaptureEngineAttributeKeys" type="MediaAttributeKey&lt;SharpDX.ComObject&gt;" name="MediaSourceConfig">new MediaAttributeKey&lt;SharpDX.ComObject&gt;("$1")</const>
      <const from-guid="MF_CAPTURE_ENGINE_RECORD_SINK_AUDIO_MAX_PROCESSED_SAMPLES" class="SharpDX.MediaFoundation.CaptureEngineAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="RecordSinkAudioMaxProcessedSamples">new MediaAttributeKey&lt;int&gt;("$1")</const>
      <const from-guid="MF_CAPTURE_ENGINE_RECORD_SINK_AUDIO_MAX_UNPROCESSED_SAMPLES" class="SharpDX.MediaFoundation.CaptureEngineAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="RecordSinkAudioMaxUnprocessedSamples">new MediaAttributeKey&lt;long&gt;("$1")</const>
      <const from-guid="MF_CAPTURE_ENGINE_RECORD_SINK_VIDEO_MAX_PROCESSED_SAMPLES" class="SharpDX.MediaFoundation.CaptureEngineAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="RecordSinkVideoMaxProcessedSamples">new MediaAttributeKey&lt;int&gt;("$1")</const>
      <const from-guid="MF_CAPTURE_ENGINE_RECORD_SINK_VIDEO_MAX_UNPROCESSED_SAMPLES" class="SharpDX.MediaFoundation.CaptureEngineAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="RecordSinkVideoMaxUnprocessedSamples">new MediaAttributeKey&lt;long&gt;("$1")</const>
      <const from-guid="MF_CAPTURE_ENGINE_USE_AUDIO_DEVICE_ONLY" class="SharpDX.MediaFoundation.CaptureEngineAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="UseAudioDeviceOnly">new MediaAttributeKey&lt;int&gt;("$1")</const>
      <const from-guid="MF_CAPTURE_ENGINE_USE_VIDEO_DEVICE_ONLY" class="SharpDX.MediaFoundation.CaptureEngineAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="UseVideoDeviceOnly">new MediaAttributeKey&lt;int&gt;("$1")</const>
      <const from-guid="MF_DEVICESTREAM_EXTENSION_PLUGIN_CLSID" class="SharpDX.MediaFoundation.DeviceStreamAttributeKeys" type="MediaAttributeKey&lt;System.Guid&gt;" name="ExtensionPluginClsid">new MediaAttributeKey&lt;System.Guid&gt;("$1")</const>
      <const from-guid="MF_DEVICESTREAM_EXTENSION_PLUGIN_CONNECTION_POINT" class="SharpDX.MediaFoundation.DeviceStreamAttributeKeys" type="MediaAttributeKey&lt;SharpDX.ComObject&gt;" name="ExtensionPluginConnectionPoint">new MediaAttributeKey&lt;SharpDX.ComObject&gt;("$1")</const>
      <const from-guid="MF_DEVICESTREAM_IMAGE_STREAM" class="SharpDX.MediaFoundation.DeviceStreamAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="ImageStream">new MediaAttributeKey&lt;bool&gt;("$1")</const>
      <const from-guid="MF_DEVICESTREAM_INDEPENDENT_IMAGE_STREAM" class="SharpDX.MediaFoundation.DeviceStreamAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="IndependentImageStream">new MediaAttributeKey&lt;bool&gt;("$1")</const>
      <const from-guid="MF_DEVICESTREAM_MAX_FRAME_BUFFERS" class="SharpDX.MediaFoundation.DeviceStreamAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="MaxFrameBuffers">new MediaAttributeKey&lt;int&gt;("$1")</const>
      <const from-guid="MF_DEVICESTREAM_STREAM_CATEGORY" class="SharpDX.MediaFoundation.DeviceStreamAttributeKeys" type="MediaAttributeKey&lt;System.Guid&gt;" name="StreamCategory">new MediaAttributeKey&lt;System.Guid&gt;("$1")</const>
      <const from-guid="MF_DEVICESTREAM_STREAM_ID" class="SharpDX.MediaFoundation.DeviceStreamAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="StreamId">new MediaAttributeKey&lt;int&gt;("$1")</const>
      <const from-guid="MF_DEVICESTREAM_TAKEPHOTO_TRIGGER" class="SharpDX.MediaFoundation.DeviceStreamAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="TakephotoTrigger">new MediaAttributeKey&lt;int&gt;("$1")</const>
      <const from-guid="MF_DEVICESTREAM_TRANSFORM_STREAM_ID" class="SharpDX.MediaFoundation.DeviceStreamAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="TransformStreamId">new MediaAttributeKey&lt;int&gt;("$1")</const>

      <const from-guid="MF_USER_DATA_PAYLOAD" class="SharpDX.MediaFoundation.MediaAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="UserDataPayload">new MediaAttributeKey&lt;byte[]&gt;("$1")</const>
      <const from-guid="MF_VIDEO_PROCESSOR_MIRROR" class="SharpDX.MediaFoundation.MediaAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="VideoProcessorMirror">new MediaAttributeKey&lt;int&gt;("$1")</const>
      <const from-guid="MF_VIDEO_PROCESSOR_ROTATION" class="SharpDX.MediaFoundation.MediaAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="VideoProcessorRotation">new MediaAttributeKey&lt;int&gt;("$1")</const>
      <const from-guid="MF_VIDEODSP_MODE" class="SharpDX.MediaFoundation.MediaAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="VideodspMode">new MediaAttributeKey&lt;int&gt;("$1")</const>
      <const from-guid="MF_XVP_DISABLE_FRC" class="SharpDX.MediaFoundation.MediaAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="XvpDisableFrc">new MediaAttributeKey&lt;bool&gt;("$1")</const>
      <const from-guid="MF_MEDIA_ENGINE_AUDIO_CATEGORY" class="SharpDX.MediaFoundation.MediaEngineAttributeKeys" type="MediaAttributeKey&lt;SharpDX.Multimedia.AudioStreamCategory&gt;" name="AudioCategory">new MediaAttributeKey&lt;SharpDX.Multimedia.AudioStreamCategory&gt;("$1")</const>
      <const from-guid="MF_MEDIA_ENGINE_AUDIO_ENDPOINT_ROLE" class="SharpDX.MediaFoundation.MediaEngineAttributeKeys" type="MediaAttributeKey&lt;SharpDX.Multimedia.AudioEndpointRole&gt;" name="AudioEndpointRole">new MediaAttributeKey&lt;SharpDX.Multimedia.AudioEndpointRole&gt;("$1")</const>
      <const from-guid="MF_MEDIA_ENGINE_CALLBACK" class="SharpDX.MediaFoundation.MediaEngineAttributeKeys" type="MediaAttributeKey&lt;SharpDX.ComObject&gt;" name="Callback">new MediaAttributeKey&lt;SharpDX.ComObject&gt;("$1")</const>
      <const from-guid="MF_MEDIA_ENGINE_CONTENT_PROTECTION_FLAGS" class="SharpDX.MediaFoundation.MediaEngineAttributeKeys" type="MediaAttributeKey&lt;MediaEngineProtectionFlags&gt;" name="ContentProtectionFlags">new MediaAttributeKey&lt;MediaEngineProtectionFlags&gt;("$1")</const>
      <const from-guid="MF_MEDIA_ENGINE_CONTENT_PROTECTION_MANAGER" class="SharpDX.MediaFoundation.MediaEngineAttributeKeys" type="MediaAttributeKey&lt;SharpDX.ComObject&gt;" name="ContentProtectionManager">new MediaAttributeKey&lt;SharpDX.ComObject&gt;("$1")</const>
      <const from-guid="MF_MEDIA_ENGINE_DXGI_MANAGER" class="SharpDX.MediaFoundation.MediaEngineAttributeKeys" type="MediaAttributeKey&lt;DXGIDeviceManager&gt;" name="DxgiManager">new MediaAttributeKey&lt;DXGIDeviceManager&gt;("$1")</const>
      <ifdef name="WP8">
        <const from-guid="MF_MEDIA_ENGINE_EXTENSION" class="SharpDX.MediaFoundation.MediaEngineAttributeKeys" type="MediaAttributeKey&lt;SharpDX.ComObject&gt;" name="Extension">new MediaAttributeKey&lt;SharpDX.ComObject&gt;("$1")</const>
      </ifdef>
      <ifndef name="WP8">
        <const from-guid="MF_MEDIA_ENGINE_EXTENSION" class="SharpDX.MediaFoundation.MediaEngineAttributeKeys" type="MediaAttributeKey&lt;MediaEngineExtension&gt;" name="Extension">new MediaAttributeKey&lt;MediaEngineExtension&gt;("$1")</const>
      </ifndef>
      <const from-guid="MF_MEDIA_ENGINE_OPM_HWND" class="SharpDX.MediaFoundation.MediaEngineAttributeKeys" type="MediaAttributeKey&lt;System.IntPtr&gt;" name="OpmHwnd">new MediaAttributeKey&lt;System.IntPtr&gt;("$1")</const>
      <const from-guid="MF_MEDIA_ENGINE_OPM_IWINDOW" class="SharpDX.MediaFoundation.MediaEngineAttributeKeys" type="MediaAttributeKey&lt;SharpDX.ComObject&gt;" name="OpmIwindow">new MediaAttributeKey&lt;SharpDX.ComObject&gt;("$1")</const>
      <const from-guid="MF_MEDIA_ENGINE_PLAYBACK_HWND" class="SharpDX.MediaFoundation.MediaEngineAttributeKeys" type="MediaAttributeKey&lt;System.IntPtr&gt;" name="PlaybackHwnd">new MediaAttributeKey&lt;System.IntPtr&gt;("$1")</const>
      <const from-guid="MF_MEDIA_ENGINE_PLAYBACK_VISUAL" class="SharpDX.MediaFoundation.MediaEngineAttributeKeys" type="MediaAttributeKey&lt;SharpDX.ComObject&gt;" name="PlaybackVisual">new MediaAttributeKey&lt;SharpDX.ComObject&gt;("$1")</const>
      <const from-guid="MF_MEDIA_ENGINE_VIDEO_OUTPUT_FORMAT" class="SharpDX.MediaFoundation.MediaEngineAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="VideoOutputFormat">new MediaAttributeKey&lt;int&gt;("$1")</const>

      <const from-guid="MF_MPEG4SINK_MOOV_BEFORE_MDAT" class="SharpDX.MediaFoundation.Mpeg4MediaSinkAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="MoovBeforeMdat">new MediaAttributeKey&lt;int&gt;("$1")</const>
      <const from-guid="MF_MPEG4SINK_SPSPPS_PASSTHROUGH" class="SharpDX.MediaFoundation.Mpeg4MediaSinkAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="SpsppsPassthrough">new MediaAttributeKey&lt;bool&gt;("$1")</const>

      <const from-guid="MF_NALU_LENGTH_INFORMATION" class="SharpDX.MediaFoundation.NaluAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="LengthInformation">new MediaAttributeKey&lt;byte[]&gt;("$1")</const>
      <const from-guid="MF_NALU_LENGTH_SET" class="SharpDX.MediaFoundation.NaluAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="LengthSet">new MediaAttributeKey&lt;int&gt;("$1")</const>

      <const from-guid="MF_LOCAL_PLUGIN_CONTROL_POLICY" class="SharpDX.MediaFoundation.MediaAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="LocalPluginControlPolicy">new MediaAttributeKey&lt;int&gt;("$1")</const>
      <const from-guid="MFPROTECTION_GRAPHICS_TRANSFER_AES_ENCRYPTION" class="SharpDX.MediaFoundation.ProtectionAttributeKeys" type="MediaAttributeKey&lt;System.Guid&gt;" name="GraphicsTransferAesEncryption">new MediaAttributeKey&lt;System.Guid&gt;("$1")</const>
      <const from-guid="MFPROTECTION_VIDEO_FRAMES" class="SharpDX.MediaFoundation.ProtectionAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="VideoFrames">new MediaAttributeKey&lt;int&gt;("$1")</const>
      <const from-guid="MFPROTECTIONATTRIBUTE_BEST_EFFORT" class="SharpDX.MediaFoundation.ProtectionAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="BestEffort">new MediaAttributeKey&lt;bool&gt;("$1")</const>
      <const from-guid="MFPROTECTIONATTRIBUTE_FAIL_OVER" class="SharpDX.MediaFoundation.ProtectionAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="FailOver">new MediaAttributeKey&lt;bool&gt;("$1")</const>
      <const from-guid="MF_SOURCE_STREAM_SUPPORTS_HW_CONNECTION" class="SharpDX.MediaFoundation.MediaAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="SourceStreamSupportsHardwareConnection">new MediaAttributeKey&lt;bool&gt;("$1")</const>

      <const from-guid="MF_STREAM_SINK_SUPPORTS_HW_CONNECTION" class="SharpDX.MediaFoundation.MediaAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="SupportsHardwareConnection">new MediaAttributeKey&lt;bool&gt;("$1")</const>
      <const from-guid="MF_STREAM_SINK_SUPPORTS_ROTATION" class="SharpDX.MediaFoundation.MediaAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="SupportsRotation">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    </ifdef>

    <create visibility="public static" class="DLNAMediaSinkAttributeKeys" />
    <create visibility="public static" class="EventAttributeKeys" />
    <create visibility="public static" class="EVRAttributeKeys" />
    <create visibility="public static" class="EVRConfigAttributeKeys" />
    <create visibility="public static" class="EVRCustomVideoAttributeKeys" />
    <create visibility="public static" class="MediaSessionAttributeKeys" />
    <create visibility="public static" class="MediaTypeAttributeKeys" />
    <create visibility="public static" class="PresentationDescriptionAttributeKeys" />
    <create visibility="public static" class="SampleAttributeKeys" />
    <create visibility="public static" class="SampleGrabberSinkAttributeKeys" />
    <create visibility="public static" class="SinkWriterAttributeKeys" />
    <create visibility="public static" class="SourceReaderAttributeKeys" />
    <create visibility="public static" class="StreamDescriptorAttributeKeys" />
    <create visibility="public static" class="TopologyAttributeKeys" />
    <create visibility="public static" class="TopologyNodeAttributeKeys" />
    <create visibility="public static" class="TranscodeAttributeKeys" />
    <create visibility="public static" class="TransformAttributeKeys" />

    <create visibility="public static" class="AudioFormatGuids" />
    <const from-guid="MFAudioFormat_(.*)" class="SharpDX.MediaFoundation.AudioFormatGuids" type="System.Guid" name="$1">new Guid("$1")</const>

    <create visibility="public static" class="MediaTypeGuids" />
    <const from-guid="MFMediaType_(.*)" class="SharpDX.MediaFoundation.MediaTypeGuids" type="System.Guid" name="$1">new Guid("$1")</const>

    <const from-guid="EVRConfig_AllowBatching" class="SharpDX.MediaFoundation.EVRConfigAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AllowBatching">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="EVRConfig_AllowDropToBob" class="SharpDX.MediaFoundation.EVRConfigAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AllowDropToBob">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="EVRConfig_AllowDropToHalfInterlace" class="SharpDX.MediaFoundation.EVRConfigAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AllowDropToHalfInterlace">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="EVRConfig_AllowDropToThrottle" class="SharpDX.MediaFoundation.EVRConfigAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AllowDropToThrottle">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="EVRConfig_AllowScaling" class="SharpDX.MediaFoundation.EVRConfigAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AllowScaling">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="EVRConfig_ForceBatching" class="SharpDX.MediaFoundation.EVRConfigAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="ForceBatching">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="EVRConfig_ForceBob" class="SharpDX.MediaFoundation.EVRConfigAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="ForceBob">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="EVRConfig_ForceHalfInterlace" class="SharpDX.MediaFoundation.EVRConfigAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="ForceHalfInterlace">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="EVRConfig_ForceScaling" class="SharpDX.MediaFoundation.EVRConfigAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="ForceScaling">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="EVRConfig_ForceThrottle" class="SharpDX.MediaFoundation.EVRConfigAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="ForceThrottle">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_ACTIVATE_CUSTOM_VIDEO_MIXER_ACTIVATE" class="SharpDX.MediaFoundation.EVRCustomVideoAttributeKeys" type="MediaAttributeKey&lt;SharpDX.ComObject&gt;" name="MixerActivate">new MediaAttributeKey&lt;SharpDX.ComObject&gt;("$1")</const>
    <const from-guid="MF_ACTIVATE_CUSTOM_VIDEO_MIXER_CLSID" class="SharpDX.MediaFoundation.EVRCustomVideoAttributeKeys" type="MediaAttributeKey&lt;System.Guid&gt;" name="MixerClsid">new MediaAttributeKey&lt;System.Guid&gt;("$1")</const>
    <const from-guid="MF_ACTIVATE_CUSTOM_VIDEO_MIXER_FLAGS" class="SharpDX.MediaFoundation.EVRCustomVideoAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="MixerFlags">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_ACTIVATE" class="SharpDX.MediaFoundation.EVRCustomVideoAttributeKeys" type="MediaAttributeKey&lt;SharpDX.ComObject&gt;" name="PresenterActivate">new MediaAttributeKey&lt;SharpDX.ComObject&gt;("$1")</const>
    <const from-guid="MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_CLSID" class="SharpDX.MediaFoundation.EVRCustomVideoAttributeKeys" type="MediaAttributeKey&lt;System.Guid&gt;" name="PresenterClsid">new MediaAttributeKey&lt;System.Guid&gt;("$1")</const>
    <const from-guid="MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_FLAGS" class="SharpDX.MediaFoundation.EVRCustomVideoAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="PresenterFlags">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_ACTIVATE_MFT_LOCKED" class="SharpDX.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="ActivateMftLocked">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    <const from-guid="MF_ACTIVATE_VIDEO_WINDOW" class="SharpDX.MediaFoundation.EVRCustomVideoAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="ActivateVideoWindow">new MediaAttributeKey&lt;long&gt;("$1")</const>
    <const from-guid="MF_ASFPROFILE_MAXPACKETSIZE" class="SharpDX.MediaFoundation.AsfProfileAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="Maxpacketsize">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_ASFPROFILE_MINPACKETSIZE" class="SharpDX.MediaFoundation.AsfProfileAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="Minpacketsize">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_ASFSTREAMCONFIG_LEAKYBUCKET1" class="SharpDX.MediaFoundation.AsfStreamConfigAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="LeakyBucket1">new MediaAttributeKey&lt;byte[]&gt;("$1")</const>
    <const from-guid="MF_ASFSTREAMCONFIG_LEAKYBUCKET2" class="SharpDX.MediaFoundation.AsfStreamConfigAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="LeakyBucket2">new MediaAttributeKey&lt;byte[]&gt;("$1")</const>
    <const from-guid="MF_AUDIO_RENDERER_ATTRIBUTE_ENDPOINT_ID" class="SharpDX.MediaFoundation.AudioRendererAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="EndpointId">new MediaAttributeKey&lt;string&gt;("$1")</const>
    <const from-guid="MF_AUDIO_RENDERER_ATTRIBUTE_ENDPOINT_ROLE" class="SharpDX.MediaFoundation.AudioRendererAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="EndpointRole">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS" class="SharpDX.MediaFoundation.AudioRendererAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="Flags">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_AUDIO_RENDERER_ATTRIBUTE_SESSION_ID" class="SharpDX.MediaFoundation.AudioRendererAttributeKeys" type="MediaAttributeKey&lt;System.Guid&gt;" name="SessionId">new MediaAttributeKey&lt;System.Guid&gt;("$1")</const>
    <const from-guid="MF_AUDIO_RENDERER_ATTRIBUTE_STREAM_CATEGORY" class="SharpDX.MediaFoundation.AudioRendererAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="StreamCategory">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_BYTESTREAM_CONTENT_TYPE" class="SharpDX.MediaFoundation.ByteStreamAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="ContentType">new MediaAttributeKey&lt;string&gt;("$1")</const>
    <const from-guid="MF_BYTESTREAM_DURATION" class="SharpDX.MediaFoundation.ByteStreamAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="Duration">new MediaAttributeKey&lt;long&gt;("$1")</const>
    <const from-guid="MF_BYTESTREAM_EFFECTIVE_URL" class="SharpDX.MediaFoundation.ByteStreamAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="EffectiveUrl">new MediaAttributeKey&lt;string&gt;("$1")</const>
    <const from-guid="MF_BYTESTREAM_IFO_FILE_URI" class="SharpDX.MediaFoundation.ByteStreamAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="IfoFileUri">new MediaAttributeKey&lt;string&gt;("$1")</const>
    <const from-guid="MF_BYTESTREAM_LAST_MODIFIED_TIME" class="SharpDX.MediaFoundation.ByteStreamAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="LastModifiedTime">new MediaAttributeKey&lt;byte[]&gt;("$1")</const>
    <const from-guid="MF_BYTESTREAM_ORIGIN_NAME" class="SharpDX.MediaFoundation.ByteStreamAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="OriginName">new MediaAttributeKey&lt;string&gt;("$1")</const>
    <const from-guid="MF_BYTESTREAMHANDLER_ACCEPTS_SHARE_WRITE" class="SharpDX.MediaFoundation.ByteStreamAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="HandlerAcceptsShareWrite">new MediaAttributeKey&lt;int&gt;("$1")</const>
    
    
    
    <const from-guid="MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_GUID" class="SharpDX.MediaFoundation.CaptureDeviceAttributeKeys" type="MediaAttributeKey&lt;System.Guid&gt;" name="SourceTypeVideoCapture">new MediaAttributeKey&lt;System.Guid&gt;("$1")</const>
    <const from-guid="MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_GUID" class="SharpDX.MediaFoundation.CaptureDeviceAttributeKeys" type="MediaAttributeKey&lt;System.Guid&gt;" name="SourceTypeAudioCapture">new MediaAttributeKey&lt;System.Guid&gt;("$1")</const>
    <const from-guid="MF_DEVSOURCE_ATTRIBUTE_FRIENDLY_NAME" class="SharpDX.MediaFoundation.CaptureDeviceAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="FriendlyName">new MediaAttributeKey&lt;string&gt;("$1")</const>
    <const from-guid="MF_DEVSOURCE_ATTRIBUTE_MEDIA_TYPE" class="SharpDX.MediaFoundation.CaptureDeviceAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="MediaType">new MediaAttributeKey&lt;byte[]&gt;("$1")</const>
    <const from-guid="MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE" class="SharpDX.MediaFoundation.CaptureDeviceAttributeKeys" type="MediaAttributeKey&lt;System.Guid&gt;" name="SourceType">new MediaAttributeKey&lt;System.Guid&gt;("$1")</const>
    <const from-guid="MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_ENDPOINT_ID" class="SharpDX.MediaFoundation.CaptureDeviceAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="SourceTypeAudcapEndpointId">new MediaAttributeKey&lt;string&gt;("$1")</const>
    <const from-guid="MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_ROLE" class="SharpDX.MediaFoundation.CaptureDeviceAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="SourceTypeAudcapRole">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_CATEGORY" class="SharpDX.MediaFoundation.CaptureDeviceAttributeKeys" type="MediaAttributeKey&lt;System.Guid&gt;" name="SourceTypeVidcapCategory">new MediaAttributeKey&lt;System.Guid&gt;("$1")</const>
    <const from-guid="MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_HW_SOURCE" class="SharpDX.MediaFoundation.CaptureDeviceAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="SourceTypeVidcapHwSource">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_MAX_BUFFERS" class="SharpDX.MediaFoundation.CaptureDeviceAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="SourceTypeVidcapMaxBuffers">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_SYMBOLIC_LINK" class="SharpDX.MediaFoundation.CaptureDeviceAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="SourceTypeVidcapSymbolicLink">new MediaAttributeKey&lt;string&gt;("$1")</const>
    <const from-guid="MF_DISABLE_LOCALLY_REGISTERED_PLUGINS" class="SharpDX.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="DisableLocallyRegisteredPlugins">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_ENABLE_3DVIDEO_OUTPUT" class="SharpDX.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="Enable3dvideoOutput">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_EVENT_DO_THINNING" class="SharpDX.MediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="DoThinning">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    <const from-guid="MF_EVENT_MFT_CONTEXT" class="SharpDX.MediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="TransformContext">new MediaAttributeKey&lt;long&gt;("$1")</const>
    <const from-guid="MF_EVENT_MFT_INPUT_STREAM_ID" class="SharpDX.MediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="TransformInputStreamId">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_EVENT_OUTPUT_NODE" class="SharpDX.MediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="OutputNode">new MediaAttributeKey&lt;long&gt;("$1")</const>
    <const from-guid="MF_EVENT_PRESENTATION_TIME_OFFSET" class="SharpDX.MediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="PresentationTimeOffset">new MediaAttributeKey&lt;long&gt;("$1")</const>
    <const from-guid="MF_EVENT_SCRUBSAMPLE_TIME" class="SharpDX.MediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="ScrubsampleTime">new MediaAttributeKey&lt;long&gt;("$1")</const>
    <const from-guid="MF_EVENT_SESSIONCAPS" class="SharpDX.MediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="Sessioncaps">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_EVENT_SESSIONCAPS_DELTA" class="SharpDX.MediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="SessioncapsDelta">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_EVENT_SOURCE_ACTUAL_START" class="SharpDX.MediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="SourceActualStart">new MediaAttributeKey&lt;long&gt;("$1")</const>
    <const from-guid="MF_EVENT_SOURCE_CHARACTERISTICS" class="SharpDX.MediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="SourceCharacteristics">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_EVENT_SOURCE_CHARACTERISTICS_OLD" class="SharpDX.MediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="SourceCharacteristicsOld">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_EVENT_SOURCE_FAKE_START" class="SharpDX.MediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="SourceFakeStart">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_EVENT_SOURCE_PROJECTSTART" class="SharpDX.MediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="SourceProjectstart">new MediaAttributeKey&lt;long&gt;("$1")</const>
    <const from-guid="MF_EVENT_SOURCE_TOPOLOGY_CANCELED" class="SharpDX.MediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="SourceTopologyCanceled">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_EVENT_START_PRESENTATION_TIME" class="SharpDX.MediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="StartPresentationTime">new MediaAttributeKey&lt;long&gt;("$1")</const>
    <const from-guid="MF_EVENT_START_PRESENTATION_TIME_AT_OUTPUT" class="SharpDX.MediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="StartPresentationTimeAtOutput">new MediaAttributeKey&lt;long&gt;("$1")</const>
    <const from-guid="MF_EVENT_TOPOLOGY_STATUS" class="SharpDX.MediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="TopologyStatus">new MediaAttributeKey&lt;int&gt;("$1")</const>
    
    
    <const from-guid="MF_LOW_LATENCY" class="SharpDX.MediaFoundation.SinkWriterAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="LowLatency">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    
    
    <const from-guid="MF_MP2DLNA_AUDIO_BIT_RATE" class="SharpDX.MediaFoundation.DLNAMediaSinkAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AudioBitRate">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MP2DLNA_ENCODE_QUALITY" class="SharpDX.MediaFoundation.DLNAMediaSinkAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="EncodeQuality">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MP2DLNA_STATISTICS" class="SharpDX.MediaFoundation.DLNAMediaSinkAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="Statistics">new MediaAttributeKey&lt;byte[]&gt;("$1")</const>
    <const from-guid="MF_MP2DLNA_USE_MMCSS" class="SharpDX.MediaFoundation.DLNAMediaSinkAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="UseMmcss">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    <const from-guid="MF_MP2DLNA_VIDEO_BIT_RATE" class="SharpDX.MediaFoundation.DLNAMediaSinkAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="VideoBitRate">new MediaAttributeKey&lt;int&gt;("$1")</const>
    
    
    <const from-guid="MF_MT_AAC_AUDIO_PROFILE_LEVEL_INDICATION" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AacAudioProfileLevelIndication">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_AAC_PAYLOAD_TYPE" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AacPayloadType">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_ALL_SAMPLES_INDEPENDENT" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AllSamplesIndependent">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_AM_FORMAT_TYPE" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;System.Guid&gt;" name="AmFormatType">new MediaAttributeKey&lt;System.Guid&gt;("$1")</const>
    <const from-guid="MF_MT_ARBITRARY_FORMAT" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="ArbitraryFormat">new MediaAttributeKey&lt;byte[]&gt;("$1")</const>
    <const from-guid="MF_MT_ARBITRARY_HEADER" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="ArbitraryHeader">new MediaAttributeKey&lt;byte[]&gt;("$1")</const>
    <const from-guid="MF_MT_AUDIO_AVG_BYTES_PER_SECOND" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AudioAvgBytesPerSecond">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_AUDIO_BITS_PER_SAMPLE" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AudioBitsPerSample">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_AUDIO_BLOCK_ALIGNMENT" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AudioBlockAlignment">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_AUDIO_CHANNEL_MASK" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AudioChannelMask">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_AUDIO_FLOAT_SAMPLES_PER_SECOND" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;double&gt;" name="AudioFloatSamplesPerSecond">new MediaAttributeKey&lt;double&gt;("$1")</const>
    <const from-guid="MF_MT_AUDIO_FOLDDOWN_MATRIX" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="AudioFolddownMatrix">new MediaAttributeKey&lt;byte[]&gt;("$1")</const>
    <const from-guid="MF_MT_AUDIO_NUM_CHANNELS" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AudioNumChannels">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_AUDIO_PREFER_WAVEFORMATEX" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="AudioPreferWaveformatex">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    <const from-guid="MF_MT_AUDIO_SAMPLES_PER_BLOCK" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AudioSamplesPerBlock">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_AUDIO_SAMPLES_PER_SECOND" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AudioSamplesPerSecond">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_AUDIO_VALID_BITS_PER_SAMPLE" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AudioValidBitsPerSample">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_AUDIO_WMADRC_AVGREF" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AudioWmadrcAvgref">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_AUDIO_WMADRC_AVGTARGET" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AudioWmadrcAvgtarget">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_AUDIO_WMADRC_PEAKREF" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AudioWmadrcPeakref">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_AUDIO_WMADRC_PEAKTARGET" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AudioWmadrcPeaktarget">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_AVG_BIT_ERROR_RATE" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AvgBitErrorRate">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_AVG_BITRATE" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AvgBitrate">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_COMPRESSED" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="Compressed">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    <const from-guid="MF_MT_CUSTOM_VIDEO_PRIMARIES" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="CustomVideoPrimaries">new MediaAttributeKey&lt;byte[]&gt;("$1")</const>
    <const from-guid="MF_MT_DEFAULT_STRIDE" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="DefaultStride">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_DRM_FLAGS" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="DrmFlags">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_DV_AAUX_CTRL_PACK_0" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="DvAauxCtrlPack0">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_DV_AAUX_CTRL_PACK_1" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="DvAauxCtrlPack1">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_DV_AAUX_SRC_PACK_0" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="DvAauxSrcPack0">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_DV_AAUX_SRC_PACK_1" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="DvAauxSrcPack1">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_DV_VAUX_CTRL_PACK" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="DvVauxCtrlPack">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_DV_VAUX_SRC_PACK" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="DvVauxSrcPack">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_FIXED_SIZE_SAMPLES" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="FixedSizeSamples">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_FRAME_RATE" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="FrameRate">new MediaAttributeKey&lt;long&gt;("$1")</const>
    <const from-guid="MF_MT_FRAME_RATE_RANGE_MAX" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="FrameRateRangeMax">new MediaAttributeKey&lt;long&gt;("$1")</const>
    <const from-guid="MF_MT_FRAME_RATE_RANGE_MIN" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="FrameRateRangeMin">new MediaAttributeKey&lt;long&gt;("$1")</const>
    <const from-guid="MF_MT_FRAME_SIZE" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="FrameSize">new MediaAttributeKey&lt;long&gt;("$1")</const>
    <const from-guid="MF_MT_GEOMETRIC_APERTURE" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="GeometricAperture">new MediaAttributeKey&lt;byte[]&gt;("$1")</const>
    <const from-guid="MF_MT_H264_CAPABILITIES" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="H264Capabilities">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_H264_DYNAMIC_RESOLUTION_SCALING" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="H264DynamicResolutionScaling">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_H264_LAYER_OR_VIEW_LAYOUT" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="H264LayerOrViewLayout">new MediaAttributeKey&lt;long&gt;("$1")</const>
    <const from-guid="MF_MT_H264_MAX_CODEC_CONFIG_DELAY" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="H264MaxCodecConfigDelay">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_H264_MAX_MB_PER_SEC" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="H264MaxMbPerSec">new MediaAttributeKey&lt;byte[]&gt;("$1")</const>
    <const from-guid="MF_MT_H264_RATE_CONTROL_MODES" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="H264RateControlModes">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_H264_SIMULCAST_SUPPORT" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="H264SimulcastSupport">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_H264_SUPPORTED_RATE_CONTROL_MODES" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="H264SupportedRateControlModes">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_H264_SUPPORTED_SLICE_MODES" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="H264SupportedSliceModes">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_H264_SUPPORTED_SYNC_FRAME_TYPES" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="H264SupportedSyncFrameTypes">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_H264_SUPPORTED_USAGES" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="H264SupportedUsages">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_H264_SVC_CAPABILITIES" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="H264SvcCapabilities">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_H264_USAGE" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="H264Usage">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_IMAGE_LOSS_TOLERANT" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="ImageLossTolerant">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_INTERLACE_MODE" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="InterlaceMode">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_MAJOR_TYPE" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;System.Guid&gt;" name="MajorType">new MediaAttributeKey&lt;System.Guid&gt;("$1")</const>
    <const from-guid="MF_MT_MAX_KEYFRAME_SPACING" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="MaxKeyframeSpacing">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_MINIMUM_DISPLAY_APERTURE" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="MinimumDisplayAperture">new MediaAttributeKey&lt;byte[]&gt;("$1")</const>
    <const from-guid="MF_MT_MPEG_SEQUENCE_HEADER" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="MpegSequenceHeader">new MediaAttributeKey&lt;byte[]&gt;("$1")</const>
    <const from-guid="MF_MT_MPEG_START_TIME_CODE" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="MpegStartTimeCode">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_MPEG2_CONTENT_PACKET" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="Mpeg2ContentPACKET">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_MPEG2_FLAGS" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="Mpeg2Flags">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_MPEG2_LEVEL" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="Mpeg2Level">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_MPEG2_PROFILE" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="Mpeg2Profile">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_MPEG2_STANDARD" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="Mpeg2STANDARD">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_MPEG2_TIMECODE" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="Mpeg2TIMECODE">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_MPEG4_CURRENT_SAMPLE_ENTRY" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="Mpeg4CurrentSampleEntry">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_MPEG4_SAMPLE_DESCRIPTION" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="Mpeg4SampleDescription">new MediaAttributeKey&lt;byte[]&gt;("$1")</const>
    <const from-guid="MF_MT_ORIGINAL_4CC" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="Original4cc">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_ORIGINAL_WAVE_FORMAT_TAG" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="OriginalWaveFormatTag">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_PAD_CONTROL_FLAGS" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="PadControlFlags">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_PALETTE" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="Palette">new MediaAttributeKey&lt;byte[]&gt;("$1")</const>
    <const from-guid="MF_MT_PAN_SCAN_APERTURE" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="PanScanAperture">new MediaAttributeKey&lt;byte[]&gt;("$1")</const>
    <const from-guid="MF_MT_PAN_SCAN_ENABLED" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="PanScanEnabled">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    <const from-guid="MF_MT_PIXEL_ASPECT_RATIO" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="PixelAspectRatio">new MediaAttributeKey&lt;long&gt;("$1")</const>
    <const from-guid="MF_MT_SAMPLE_SIZE" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="SampleSize">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_SOURCE_CONTENT_HINT" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="SourceContentHint">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_SUBTYPE" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;System.Guid&gt;" name="Subtype">new MediaAttributeKey&lt;System.Guid&gt;("$1")</const>
    <const from-guid="MF_MT_TIMESTAMP_CAN_BE_DTS" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="TimestampCanBeDTS">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    <const from-guid="MF_MT_TRANSFER_FUNCTION" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="TransferFunction">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_USER_DATA" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="UserData">new MediaAttributeKey&lt;byte[]&gt;("$1")</const>
    <const from-guid="MF_MT_VIDEO_3D" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="Video3d">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    <const from-guid="MF_MT_VIDEO_3D_FIRST_IS_LEFT" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="Video3dFirstIsLeft">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    <const from-guid="MF_MT_VIDEO_3D_FORMAT" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="Video3dFormat">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_VIDEO_3D_LEFT_IS_BASE" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="Video3dLeftIsBase">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    <const from-guid="MF_MT_VIDEO_3D_NUM_VIEWS" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="Video3dNumViews">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_VIDEO_CHROMA_SITING" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="VideoChromaSiting">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_VIDEO_LIGHTING" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="VideoLighting">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_VIDEO_NOMINAL_RANGE" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="VideoNominalRange">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_VIDEO_PRIMARIES" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="VideoPrimaries">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_VIDEO_ROTATION" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="VideoRotation">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_MT_WRAPPED_TYPE" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="WrappedType">new MediaAttributeKey&lt;byte[]&gt;("$1")</const>
    <const from-guid="MF_MT_YUV_MATRIX" class="SharpDX.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="YuvMatrix">new MediaAttributeKey&lt;int&gt;("$1")</const>
    
    
    <const from-guid="MF_PD_APP_CONTEXT" class="SharpDX.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;SharpDX.ComObject&gt;" name="AppContext">new MediaAttributeKey&lt;SharpDX.ComObject&gt;("$1")</const>
    <const from-guid="MF_PD_ASF_CODECLIST" class="SharpDX.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="AsfCodeclist">new MediaAttributeKey&lt;byte[]&gt;("$1")</const>
    <const from-guid="MF_PD_ASF_CONTENTENCRYPTION_KEYID" class="SharpDX.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="AsfContentencryptionKeyid">new MediaAttributeKey&lt;string&gt;("$1")</const>
    <const from-guid="MF_PD_ASF_CONTENTENCRYPTION_LICENSE_URL" class="SharpDX.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="AsfContentencryptionLicenseUrl">new MediaAttributeKey&lt;string&gt;("$1")</const>
    <const from-guid="MF_PD_ASF_CONTENTENCRYPTION_SECRET_DATA" class="SharpDX.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="AsfContentencryptionSecretData">new MediaAttributeKey&lt;byte[]&gt;("$1")</const>
    <const from-guid="MF_PD_ASF_CONTENTENCRYPTION_TYPE" class="SharpDX.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="AsfContentencryptionType">new MediaAttributeKey&lt;string&gt;("$1")</const>
    <const from-guid="MF_PD_ASF_CONTENTENCRYPTIONEX_ENCRYPTION_DATA" class="SharpDX.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="AsfContentencryptionexEncryptionData">new MediaAttributeKey&lt;byte[]&gt;("$1")</const>
    <const from-guid="MF_PD_ASF_DATA_LENGTH" class="SharpDX.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="AsfDataLength">new MediaAttributeKey&lt;long&gt;("$1")</const>
    <const from-guid="MF_PD_ASF_DATA_START_OFFSET" class="SharpDX.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="AsfDataStartOffset">new MediaAttributeKey&lt;long&gt;("$1")</const>
    <const from-guid="MF_PD_ASF_FILEPROPERTIES_CREATION_TIME" class="SharpDX.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="AsfFilepropertiesCreationTime">new MediaAttributeKey&lt;byte[]&gt;("$1")</const>
    <const from-guid="MF_PD_ASF_FILEPROPERTIES_FILE_ID" class="SharpDX.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;System.Guid&gt;" name="AsfFilepropertiesFileId">new MediaAttributeKey&lt;System.Guid&gt;("$1")</const>
    <const from-guid="MF_PD_ASF_FILEPROPERTIES_FLAGS" class="SharpDX.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AsfFilepropertiesFlags">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_PD_ASF_FILEPROPERTIES_MAX_BITRATE" class="SharpDX.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AsfFilepropertiesMaxBitrate">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_PD_ASF_FILEPROPERTIES_MAX_PACKET_SIZE" class="SharpDX.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AsfFilepropertiesMaxPacketSize">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_PD_ASF_FILEPROPERTIES_MIN_PACKET_SIZE" class="SharpDX.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AsfFilepropertiesMinPacketSize">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_PD_ASF_FILEPROPERTIES_PACKETS" class="SharpDX.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AsfFilepropertiesPackets">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_PD_ASF_FILEPROPERTIES_PLAY_DURATION" class="SharpDX.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="AsfFilepropertiesPlayDuration">new MediaAttributeKey&lt;long&gt;("$1")</const>
    <const from-guid="MF_PD_ASF_FILEPROPERTIES_PREROLL" class="SharpDX.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="AsfFilepropertiesPreroll">new MediaAttributeKey&lt;long&gt;("$1")</const>
    <const from-guid="MF_PD_ASF_FILEPROPERTIES_SEND_DURATION" class="SharpDX.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="AsfFilepropertiesSendDuration">new MediaAttributeKey&lt;long&gt;("$1")</const>
    <const from-guid="MF_PD_ASF_INFO_HAS_AUDIO" class="SharpDX.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="AsfInfoHasAudio">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    <const from-guid="MF_PD_ASF_INFO_HAS_NON_AUDIO_VIDEO" class="SharpDX.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="AsfInfoHasNonAudioVideo">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    <const from-guid="MF_PD_ASF_INFO_HAS_VIDEO" class="SharpDX.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="AsfInfoHasVideo">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    <const from-guid="MF_PD_ASF_LANGLIST" class="SharpDX.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="AsfLanglist">new MediaAttributeKey&lt;byte[]&gt;("$1")</const>
    <const from-guid="MF_PD_ASF_LANGLIST_LEGACYORDER" class="SharpDX.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="AsfLanglistLegacyorder">new MediaAttributeKey&lt;byte[]&gt;("$1")</const>
    <const from-guid="MF_PD_ASF_MARKER" class="SharpDX.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="AsfMarker">new MediaAttributeKey&lt;byte[]&gt;("$1")</const>
    <const from-guid="MF_PD_ASF_METADATA_IS_VBR" class="SharpDX.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="AsfMetadataIsVbr">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    <const from-guid="MF_PD_ASF_METADATA_LEAKY_BUCKET_PAIRS" class="SharpDX.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="AsfMetadataLeakyBucketPairs">new MediaAttributeKey&lt;byte[]&gt;("$1")</const>
    <const from-guid="MF_PD_ASF_METADATA_V8_BUFFERAVERAGE" class="SharpDX.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AsfMetadataV8Bufferaverage">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_PD_ASF_METADATA_V8_VBRPEAK" class="SharpDX.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AsfMetadataV8Vbrpeak">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_PD_ASF_SCRIPT" class="SharpDX.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="AsfScript">new MediaAttributeKey&lt;byte[]&gt;("$1")</const>
    <const from-guid="MF_PD_AUDIO_ENCODING_BITRATE" class="SharpDX.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AudioEncodingBitrate">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_PD_AUDIO_ISVARIABLEBITRATE" class="SharpDX.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AudioIsvariablebitrate">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_PD_DURATION" class="SharpDX.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="Duration">new MediaAttributeKey&lt;long&gt;("$1")</const>
    <const from-guid="MF_PD_LAST_MODIFIED_TIME" class="SharpDX.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="LastModifiedTime">new MediaAttributeKey&lt;byte[]&gt;("$1")</const>
    <const from-guid="MF_PD_MIME_TYPE" class="SharpDX.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="MimeType">new MediaAttributeKey&lt;string&gt;("$1")</const>
    <const from-guid="MF_PD_PLAYBACK_BOUNDARY_TIME" class="SharpDX.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="PlaybackBoundaryTime">new MediaAttributeKey&lt;long&gt;("$1")</const>
    <const from-guid="MF_PD_PLAYBACK_ELEMENT_ID" class="SharpDX.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="PlaybackElementId">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_PD_PMPHOST_CONTEXT" class="SharpDX.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;SharpDX.ComObject&gt;" name="PmphostContext">new MediaAttributeKey&lt;SharpDX.ComObject&gt;("$1")</const>
    <const from-guid="MF_PD_PREFERRED_LANGUAGE" class="SharpDX.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="PreferredLanguage">new MediaAttributeKey&lt;string&gt;("$1")</const>
    <const from-guid="MF_PD_SAMI_STYLELIST" class="SharpDX.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="SamiStylelist">new MediaAttributeKey&lt;byte[]&gt;("$1")</const>
    <const from-guid="MF_PD_TOTAL_FILE_SIZE" class="SharpDX.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="TotalFileSize">new MediaAttributeKey&lt;long&gt;("$1")</const>
    <const from-guid="MF_PD_VIDEO_ENCODING_BITRATE" class="SharpDX.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="VideoEncodingBitrate">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_READWRITE_D3D_OPTIONAL" class="SharpDX.MediaFoundation.SinkWriterAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="ReadwriteD3DOptional">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    <const from-guid="MF_READWRITE_DISABLE_CONVERTERS" class="SharpDX.MediaFoundation.SinkWriterAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="ReadwriteDisableConverters">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_READWRITE_ENABLE_HARDWARE_TRANSFORMS" class="SharpDX.MediaFoundation.SinkWriterAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="ReadwriteEnableHardwareTransforms">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_READWRITE_MMCSS_CLASS" class="SharpDX.MediaFoundation.SinkWriterAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="ReadwriteMmcssClass">new MediaAttributeKey&lt;string&gt;("$1")</const>
    <const from-guid="MF_READWRITE_MMCSS_CLASS_AUDIO" class="SharpDX.MediaFoundation.SinkWriterAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="ReadwriteMmcssClassAudio">new MediaAttributeKey&lt;string&gt;("$1")</const>
    <const from-guid="MF_READWRITE_MMCSS_PRIORITY" class="SharpDX.MediaFoundation.SinkWriterAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="ReadwriteMmcssPriority">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_READWRITE_MMCSS_PRIORITY_AUDIO" class="SharpDX.MediaFoundation.SinkWriterAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="ReadwriteMmcssPriorityAudio">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_SA_BUFFERS_PER_SAMPLE" class="SharpDX.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="BuffersPerSample">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_SA_D3D_AWARE" class="SharpDX.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="D3DAware">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    <const from-guid="MF_SA_D3D11_AWARE" class="SharpDX.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="D3D11Aware">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    <const from-guid="MF_SA_D3D11_BINDFLAGS" class="SharpDX.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="D3D11Bindflags">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_SA_D3D11_USAGE" class="SharpDX.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="D3D11Usage">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_SA_REQUIRED_SAMPLE_COUNT" class="SharpDX.MediaFoundation.EVRAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="SaRequiredSampleCount">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_SAMPLEGRABBERSINK_IGNORE_CLOCK" class="SharpDX.MediaFoundation.SampleGrabberSinkAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="IgnoreClock">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_SAMPLEGRABBERSINK_SAMPLE_TIME_OFFSET" class="SharpDX.MediaFoundation.SampleGrabberSinkAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="SampleTimeOffset">new MediaAttributeKey&lt;long&gt;("$1")</const>
    <const from-guid="MF_SD_ASF_EXTSTRMPROP_AVG_BUFFERSIZE" class="SharpDX.MediaFoundation.StreamDescriptorAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AsfExtstrmpropAvgBuffersize">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_SD_ASF_EXTSTRMPROP_AVG_DATA_BITRATE" class="SharpDX.MediaFoundation.StreamDescriptorAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AsfExtstrmpropAvgDataBitrate">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_SD_ASF_EXTSTRMPROP_LANGUAGE_ID_INDEX" class="SharpDX.MediaFoundation.StreamDescriptorAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AsfExtstrmpropLanguageIdIndex">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_SD_ASF_EXTSTRMPROP_MAX_BUFFERSIZE" class="SharpDX.MediaFoundation.StreamDescriptorAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AsfExtstrmpropMaxBuffersize">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_SD_ASF_EXTSTRMPROP_MAX_DATA_BITRATE" class="SharpDX.MediaFoundation.StreamDescriptorAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AsfExtstrmpropMaxDataBitrate">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_SD_ASF_METADATA_DEVICE_CONFORMANCE_TEMPLATE" class="SharpDX.MediaFoundation.StreamDescriptorAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="AsfMetadataDeviceConformanceTemplate">new MediaAttributeKey&lt;string&gt;("$1")</const>
    <const from-guid="MF_SD_ASF_STREAMBITRATES_BITRATE" class="SharpDX.MediaFoundation.StreamDescriptorAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AsfStreambitratesBitrate">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_SD_LANGUAGE" class="SharpDX.MediaFoundation.StreamDescriptorAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="Language">new MediaAttributeKey&lt;string&gt;("$1")</const>
    <const from-guid="MF_SD_MUTUALLY_EXCLUSIVE" class="SharpDX.MediaFoundation.StreamDescriptorAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="MutuallyExclusive">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_SD_PROTECTED" class="SharpDX.MediaFoundation.StreamDescriptorAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="Protected">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    <const from-guid="MF_SD_SAMI_LANGUAGE" class="SharpDX.MediaFoundation.StreamDescriptorAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="SamiLanguage">new MediaAttributeKey&lt;string&gt;("$1")</const>
    <const from-guid="MF_SD_STREAM_NAME" class="SharpDX.MediaFoundation.StreamDescriptorAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="StreamName">new MediaAttributeKey&lt;string&gt;("$1")</const>
    <const from-guid="MF_SESSION_APPROX_EVENT_OCCURRENCE_TIME" class="SharpDX.MediaFoundation.MediaSessionAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="ApproxEventOccurrenceTime">new MediaAttributeKey&lt;long&gt;("$1")</const>
    <const from-guid="MF_SESSION_CONTENT_PROTECTION_MANAGER" class="SharpDX.MediaFoundation.MediaSessionAttributeKeys" type="MediaAttributeKey&lt;SharpDX.ComObject&gt;" name="ContentProtectionManager">new MediaAttributeKey&lt;SharpDX.ComObject&gt;("$1")</const>
    <const from-guid="MF_SESSION_GLOBAL_TIME" class="SharpDX.MediaFoundation.MediaSessionAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="GlobalTime">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    <const from-guid="MF_SESSION_QUALITY_MANAGER" class="SharpDX.MediaFoundation.MediaSessionAttributeKeys" type="MediaAttributeKey&lt;System.Guid&gt;" name="QualityManager">new MediaAttributeKey&lt;System.Guid&gt;("$1")</const>
    <const from-guid="MF_SESSION_REMOTE_SOURCE_MODE" class="SharpDX.MediaFoundation.MediaSessionAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="RemoteSourceMode">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    <const from-guid="MF_SESSION_SERVER_CONTEXT" class="SharpDX.MediaFoundation.MediaSessionAttributeKeys" type="MediaAttributeKey&lt;SharpDX.ComObject&gt;" name="ServerContext">new MediaAttributeKey&lt;SharpDX.ComObject&gt;("$1")</const>
    <const from-guid="MF_SESSION_TOPOLOADER" class="SharpDX.MediaFoundation.MediaSessionAttributeKeys" type="MediaAttributeKey&lt;System.Guid&gt;" name="Topoloader">new MediaAttributeKey&lt;System.Guid&gt;("$1")</const>
    <const from-guid="MF_SINK_WRITER_ASYNC_CALLBACK" class="SharpDX.MediaFoundation.SinkWriterAttributeKeys" type="MediaAttributeKey&lt;SharpDX.ComObject&gt;" name="AsyncCallback">new MediaAttributeKey&lt;SharpDX.ComObject&gt;("$1")</const>
    <const from-guid="MF_SINK_WRITER_D3D_MANAGER" class="SharpDX.MediaFoundation.SinkWriterAttributeKeys" type="MediaAttributeKey&lt;SharpDX.ComObject&gt;" name="D3DManager">new MediaAttributeKey&lt;SharpDX.ComObject&gt;("$1")</const>
    <const from-guid="MF_SINK_WRITER_DISABLE_THROTTLING" class="SharpDX.MediaFoundation.SinkWriterAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="DisableThrottling">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_SINK_WRITER_ENCODER_CONFIG" class="SharpDX.MediaFoundation.SinkWriterAttributeKeys" type="MediaAttributeKey&lt;SharpDX.ComObject&gt;" name="EncoderConfig">new MediaAttributeKey&lt;SharpDX.ComObject&gt;("$1")</const>
    <const from-guid="MF_SOURCE_READER_ASYNC_CALLBACK" class="SharpDX.MediaFoundation.SourceReaderAttributeKeys" type="MediaAttributeKey&lt;SharpDX.ComObject&gt;" name="AsyncCallback">new MediaAttributeKey&lt;SharpDX.ComObject&gt;("$1")</const>
    <const from-guid="MF_SOURCE_READER_D3D_MANAGER" class="SharpDX.MediaFoundation.SourceReaderAttributeKeys" type="MediaAttributeKey&lt;SharpDX.ComObject&gt;" name="D3DManager">new MediaAttributeKey&lt;SharpDX.ComObject&gt;("$1")</const>
    <const from-guid="MF_SOURCE_READER_DISABLE_CAMERA_PLUGINS" class="SharpDX.MediaFoundation.SourceReaderAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="DisableCameraPlugins">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    <const from-guid="MF_SOURCE_READER_DISABLE_DXVA" class="SharpDX.MediaFoundation.SourceReaderAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="DisableDxva">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_SOURCE_READER_DISCONNECT_MEDIASOURCE_ON_SHUTDOWN" class="SharpDX.MediaFoundation.SourceReaderAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="DisconnectMediasourceOnShutdown">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_SOURCE_READER_ENABLE_ADVANCED_VIDEO_PROCESSING" class="SharpDX.MediaFoundation.SourceReaderAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="EnableAdvancedVideoProcessing">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    <const from-guid="MF_SOURCE_READER_ENABLE_TRANSCODE_ONLY_TRANSFORMS" class="SharpDX.MediaFoundation.SourceReaderAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="EnableTranscodeOnlyTransforms">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    <const from-guid="MF_SOURCE_READER_ENABLE_VIDEO_PROCESSING" class="SharpDX.MediaFoundation.SourceReaderAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="EnableVideoProcessing">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_SOURCE_READER_MEDIASOURCE_CHARACTERISTICS" class="SharpDX.MediaFoundation.SourceReaderAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="MediaSourceCharacteristics">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_SOURCE_READER_MEDIASOURCE_CONFIG" class="SharpDX.MediaFoundation.SourceReaderAttributeKeys" type="MediaAttributeKey&lt;SharpDX.ComObject&gt;" name="MediaSourceConfig">new MediaAttributeKey&lt;SharpDX.ComObject&gt;("$1")</const>
    
    
    
    <const from-guid="MF_TOPOLOGY_DISABLE_LOCAL_TRANSFORMS" class="SharpDX.MediaFoundation.TopologyAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="DisableLocalTransforms">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    <const from-guid="MF_TOPOLOGY_DXVA_MODE" class="SharpDX.MediaFoundation.TopologyAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="DXVAMode">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_TOPOLOGY_DYNAMIC_CHANGE_NOT_ALLOWED" class="SharpDX.MediaFoundation.TopologyAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="DynamicChangeNotAllowed">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_TOPOLOGY_ENUMERATE_SOURCE_TYPES" class="SharpDX.MediaFoundation.TopologyAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="EnumerateSourceTypes">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_TOPOLOGY_HARDWARE_MODE" class="SharpDX.MediaFoundation.TopologyAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="HardwareMode">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_TOPOLOGY_NO_MARKIN_MARKOUT" class="SharpDX.MediaFoundation.TopologyAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="NoMarkinMarkout">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    <const from-guid="MF_TOPOLOGY_PLAYBACK_FRAMERATE" class="SharpDX.MediaFoundation.TopologyAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="PlaybackFramerate">new MediaAttributeKey&lt;long&gt;("$1")</const>
    <const from-guid="MF_TOPOLOGY_PLAYBACK_MAX_DIMS" class="SharpDX.MediaFoundation.TopologyAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="PlaybackMaxDimensions">new MediaAttributeKey&lt;long&gt;("$1")</const>
    <const from-guid="MF_TOPOLOGY_PROJECTSTART" class="SharpDX.MediaFoundation.TopologyAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="ProjectStart">new MediaAttributeKey&lt;long&gt;("$1")</const>
    <const from-guid="MF_TOPOLOGY_PROJECTSTOP" class="SharpDX.MediaFoundation.TopologyAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="ProjectStop">new MediaAttributeKey&lt;long&gt;("$1")</const>
    <const from-guid="MF_TOPOLOGY_RESOLUTION_STATUS" class="SharpDX.MediaFoundation.TopologyAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="ResolutionStatus">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_TOPOLOGY_START_TIME_ON_PRESENTATION_SWITCH" class="SharpDX.MediaFoundation.TopologyAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="StartTimeOnPresentationSwitch">new MediaAttributeKey&lt;long&gt;("$1")</const>
    <const from-guid="MF_TOPOLOGY_STATIC_PLAYBACK_OPTIMIZATIONS" class="SharpDX.MediaFoundation.TopologyAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="StaticPlaybackOptimizations">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_TOPONODE_CONNECT_METHOD" class="SharpDX.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="ConnectMethod">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_TOPONODE_D3DAWARE" class="SharpDX.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="D3DAWARE">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    <const from-guid="MF_TOPONODE_DECODER" class="SharpDX.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="Decoder">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    <const from-guid="MF_TOPONODE_DECRYPTOR" class="SharpDX.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="Decryptor">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    <const from-guid="MF_TOPONODE_DISABLE_PREROLL" class="SharpDX.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="DisablePreroll">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    <const from-guid="MF_TOPONODE_DISCARDABLE" class="SharpDX.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="Discardable">new MediaAttributeKey&lt;byte[]&gt;("$1")</const>
    <const from-guid="MF_TOPONODE_DRAIN" class="SharpDX.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="Drain">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_TOPONODE_ERROR_MAJORTYPE" class="SharpDX.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;System.Guid&gt;" name="ErrorMajortype">new MediaAttributeKey&lt;System.Guid&gt;("$1")</const>
    <const from-guid="MF_TOPONODE_ERROR_SUBTYPE" class="SharpDX.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;System.Guid&gt;" name="ErrorSubtype">new MediaAttributeKey&lt;System.Guid&gt;("$1")</const>
    <const from-guid="MF_TOPONODE_ERRORCODE" class="SharpDX.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="Errorcode">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_TOPONODE_FLUSH" class="SharpDX.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="Flush">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_TOPONODE_LOCKED" class="SharpDX.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="Locked">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    <const from-guid="MF_TOPONODE_MARKIN_HERE" class="SharpDX.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="MarkinHere">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    <const from-guid="MF_TOPONODE_MARKOUT_HERE" class="SharpDX.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="MarkoutHere">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    <const from-guid="MF_TOPONODE_MEDIASTART" class="SharpDX.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="Mediastart">new MediaAttributeKey&lt;long&gt;("$1")</const>
    <const from-guid="MF_TOPONODE_MEDIASTOP" class="SharpDX.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="Mediastop">new MediaAttributeKey&lt;long&gt;("$1")</const>
    <const from-guid="MF_TOPONODE_NOSHUTDOWN_ON_REMOVE" class="SharpDX.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="NoshutdownOnRemove">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    <const from-guid="MF_TOPONODE_PRESENTATION_DESCRIPTOR" class="SharpDX.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;SharpDX.ComObject&gt;" name="PresentationDescriptor">new MediaAttributeKey&lt;SharpDX.ComObject&gt;("$1")</const>
    <const from-guid="MF_TOPONODE_PRIMARYOUTPUT" class="SharpDX.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="Primaryoutput">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_TOPONODE_RATELESS" class="SharpDX.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="Rateless">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    <const from-guid="MF_TOPONODE_SEQUENCE_ELEMENTID" class="SharpDX.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="SequenceElementid">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_TOPONODE_SOURCE" class="SharpDX.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;SharpDX.ComObject&gt;" name="Source">new MediaAttributeKey&lt;SharpDX.ComObject&gt;("$1")</const>
    <const from-guid="MF_TOPONODE_STREAM_DESCRIPTOR" class="SharpDX.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;SharpDX.ComObject&gt;" name="StreamDescriptor">new MediaAttributeKey&lt;SharpDX.ComObject&gt;("$1")</const>
    <const from-guid="MF_TOPONODE_STREAMID" class="SharpDX.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="Streamid">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_TOPONODE_TRANSFORM_OBJECTID" class="SharpDX.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;System.Guid&gt;" name="TransformObjectid">new MediaAttributeKey&lt;System.Guid&gt;("$1")</const>
    <const from-guid="MF_TOPONODE_WORKQUEUE_ID" class="SharpDX.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="WorkqueueId">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_TOPONODE_WORKQUEUE_ITEM_PRIORITY" class="SharpDX.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="WorkqueueItemPriority">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_TOPONODE_WORKQUEUE_MMCSS_CLASS" class="SharpDX.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="WorkqueueMmcssClass">new MediaAttributeKey&lt;string&gt;("$1")</const>
    <const from-guid="MF_TOPONODE_WORKQUEUE_MMCSS_PRIORITY" class="SharpDX.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="WorkqueueMmcssPriority">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_TOPONODE_WORKQUEUE_MMCSS_TASKID" class="SharpDX.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="WorkqueueMmcssTaskid">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_TRANSCODE_ADJUST_PROFILE" class="SharpDX.MediaFoundation.TranscodeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="TranscodeAdjustProfile">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_TRANSCODE_CONTAINERTYPE" class="SharpDX.MediaFoundation.TranscodeAttributeKeys" type="MediaAttributeKey&lt;System.Guid&gt;" name="TranscodeContainertype">new MediaAttributeKey&lt;System.Guid&gt;("$1")</const>
    <const from-guid="MF_TRANSCODE_DONOT_INSERT_ENCODER" class="SharpDX.MediaFoundation.TranscodeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="TranscodeDonotInsertEncoder">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_TRANSCODE_ENCODINGPROFILE" class="SharpDX.MediaFoundation.TranscodeAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="TranscodeEncodingprofile">new MediaAttributeKey&lt;string&gt;("$1")</const>
    <const from-guid="MF_TRANSCODE_QUALITYVSSPEED" class="SharpDX.MediaFoundation.TranscodeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="TranscodeQualityvsspeed">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_TRANSCODE_SKIP_METADATA_TRANSFER" class="SharpDX.MediaFoundation.TranscodeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="TranscodeSkipMetadataTransfer">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_TRANSCODE_TOPOLOGYMODE" class="SharpDX.MediaFoundation.TranscodeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="TranscodeTopologymode">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_TRANSFORM_ASYNC" class="SharpDX.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="TransformAsync">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_TRANSFORM_ASYNC_UNLOCK" class="SharpDX.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="TransformAsyncUnlock">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MF_TRANSFORM_CATEGORY_Attribute" class="SharpDX.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;System.Guid&gt;" name="TransformCategoryAttribute">new MediaAttributeKey&lt;System.Guid&gt;("$1")</const>
    <const from-guid="MF_TRANSFORM_FLAGS_Attribute" class="SharpDX.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="TransformFlagsAttribute">new MediaAttributeKey&lt;int&gt;("$1")</const>
    
    
    <const from-guid="MFASFSPLITTER_PACKET_BOUNDARY" class="SharpDX.MediaFoundation.AsfSplitterAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="PacketBoundary">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    
    
    <const from-guid="MFSampleExtension_3DVideo" class="SharpDX.MediaFoundation.SampleAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="Video3D">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    <const from-guid="MFSampleExtension_3DVideo_SampleFormat" class="SharpDX.MediaFoundation.SampleAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="Video3DSampleFormat">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MFSampleExtension_BottomFieldFirst" class="SharpDX.MediaFoundation.SampleAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="BottomFieldFirst">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    <const from-guid="MFSampleExtension_CleanPoint" class="SharpDX.MediaFoundation.SampleAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="CleanPoint">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    <const from-guid="MFSampleExtension_DecodeTimestamp" class="SharpDX.MediaFoundation.SampleAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="DecodeTimestamp">new MediaAttributeKey&lt;long&gt;("$1")</const>
    <const from-guid="MFSampleExtension_DerivedFromTopField" class="SharpDX.MediaFoundation.SampleAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="DerivedFromTopField">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    <const from-guid="MFSampleExtension_DeviceTimestamp" class="SharpDX.MediaFoundation.SampleAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="DeviceTimestamp">new MediaAttributeKey&lt;long&gt;("$1")</const>
    <const from-guid="MFSampleExtension_Discontinuity" class="SharpDX.MediaFoundation.SampleAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="Discontinuity">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    <const from-guid="MFSampleExtension_FrameCorruption" class="SharpDX.MediaFoundation.SampleAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="FrameCorruption">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MFSampleExtension_Interlaced" class="SharpDX.MediaFoundation.SampleAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="Interlaced">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    <const from-guid="MFSampleExtension_PacketCrossOffsets" class="SharpDX.MediaFoundation.SampleAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="PacketCrossOffsets">new MediaAttributeKey&lt;byte[]&gt;("$1")</const>
    <const from-guid="MFSampleExtension_RepeatFirstField" class="SharpDX.MediaFoundation.SampleAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="RepeatFirstField">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    <const from-guid="MFSampleExtension_SingleField" class="SharpDX.MediaFoundation.SampleAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="SingleField">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    <const from-guid="MFSampleExtension_Token" class="SharpDX.MediaFoundation.SampleAttributeKeys" type="MediaAttributeKey&lt;SharpDX.ComObject&gt;" name="Token">new MediaAttributeKey&lt;SharpDX.ComObject&gt;("$1")</const>
    <const from-guid="MFSampleExtension_VideoDSPMode" class="SharpDX.MediaFoundation.SampleAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="VideoDSPMode">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MFSampleExtension_VideoEncodePictureType" class="SharpDX.MediaFoundation.SampleAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="VideoEncodePictureType">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MFSampleExtension_VideoEncodeQP" class="SharpDX.MediaFoundation.SampleAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="VideoEncodeQP">new MediaAttributeKey&lt;long&gt;("$1")</const>
    <const from-guid="MFT_CODEC_MERIT_Attribute" class="SharpDX.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="MftCodecMeritAttribute">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MFT_CONNECTED_STREAM_ATTRIBUTE" class="SharpDX.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;SharpDX.ComObject&gt;" name="MftConnectedStreamAttribute">new MediaAttributeKey&lt;SharpDX.ComObject&gt;("$1")</const>
    <const from-guid="MFT_CONNECTED_TO_HW_STREAM" class="SharpDX.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="MftConnectedToHwStream">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MFT_DECODER_EXPOSE_OUTPUT_TYPES_IN_NATIVE_ORDER" class="SharpDX.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="MftDecoderExposeOutputTypesInNativeOrder">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MFT_DECODER_FINAL_VIDEO_RESOLUTION_HINT" class="SharpDX.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="MftDecoderFinalVideoResolutionHint">new MediaAttributeKey&lt;long&gt;("$1")</const>
    <const from-guid="MFT_ENUM_HARDWARE_URL_Attribute" class="SharpDX.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="MftEnumHardwareUrlAttribute">new MediaAttributeKey&lt;string&gt;("$1")</const>
    <const from-guid="MFT_ENUM_HARDWARE_VENDOR_ID_Attribute" class="SharpDX.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="MftEnumHardwareVendorIdAttribute">new MediaAttributeKey&lt;string&gt;("$1")</const>
    <const from-guid="MFT_ENUM_TRANSCODE_ONLY_ATTRIBUTE" class="SharpDX.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="MftEnumTranscodeOnlyAttribute">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MFT_FIELDOFUSE_UNLOCK_Attribute" class="SharpDX.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;SharpDX.ComObject&gt;" name="MftFieldofuseUnlockAttribute">new MediaAttributeKey&lt;SharpDX.ComObject&gt;("$1")</const>
    <const from-guid="MFT_FRIENDLY_NAME_Attribute" class="SharpDX.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="MftFriendlyNameAttribute">new MediaAttributeKey&lt;string&gt;("$1")</const>
    <const from-guid="MFT_HW_TIMESTAMP_WITH_QPC_Attribute" class="SharpDX.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="MftHwTimestampWithQpcAttribute">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MFT_INPUT_TYPES_Attributes" class="SharpDX.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="MftInputTypesAttributes">new MediaAttributeKey&lt;byte[]&gt;("$1")</const>
    <const from-guid="MFT_OUTPUT_TYPES_Attributes" class="SharpDX.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="MftOutputTypesAttributes">new MediaAttributeKey&lt;byte[]&gt;("$1")</const>
    <const from-guid="MFT_PREFERRED_ENCODER_PROFILE" class="SharpDX.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;SharpDX.ComObject&gt;" name="MftPreferredEncoderProfile">new MediaAttributeKey&lt;SharpDX.ComObject&gt;("$1")</const>
    <const from-guid="MFT_PREFERRED_OUTPUTTYPE_Attribute" class="SharpDX.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;SharpDX.ComObject&gt;" name="MftPreferredOutputtypeAttribute">new MediaAttributeKey&lt;SharpDX.ComObject&gt;("$1")</const>
    <const from-guid="MFT_PROCESS_LOCAL_Attribute" class="SharpDX.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="MftProcessLocalAttribute">new MediaAttributeKey&lt;int&gt;("$1")</const>
    <const from-guid="MFT_SUPPORT_3DVIDEO" class="SharpDX.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="MftSupport3dvideo">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    <const from-guid="MFT_SUPPORT_DYNAMIC_FORMAT_CHANGE" class="SharpDX.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="MftSupportDynamicFormatChange">new MediaAttributeKey&lt;bool&gt;("$1")</const>
    <const from-guid="MFT_TRANSFORM_CLSID_Attribute" class="SharpDX.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;System.Guid&gt;" name="MftTransformClsidAttribute">new MediaAttributeKey&lt;System.Guid&gt;("$1")</const>
    <const from-guid="VIDEO_ZOOM_RECT" class="SharpDX.MediaFoundation.EVRAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="VideoZoomRect">new MediaAttributeKey&lt;byte[]&gt;("$1")</const>

    <create class="MediaFactory" visibility="public static"/>
    <const from-macro="MF_VERSION" class="SharpDX.MediaFoundation.MediaFactory" type="int" name="Version" />

    <const from-guid="CLSID_MFMediaEngineClassFactory" visibility="internal" class="SharpDX.MediaFoundation.MediaEngineClassFactory" type="System.Guid" name="CLSID_MFMediaEngineClassFactory">new System.Guid("$1")</const>

    <context-clear />
  </extension>

  <bindings>
    <bind from="MPEG1VIDEOINFO" to="SharpDX.MediaFoundation.Mpeg1VideoInformation"/>
    <bind from="MPEG2VIDEOINFO" to="SharpDX.MediaFoundation.Mpeg2VideoInformation"/>
    <bind from="VIDEOINFOHEADER2" to="SharpDX.MediaFoundation.VideoInformationHeader2"/>
    <bind from="RESOURCE_CHARACTERISTICS" to="SharpDX.MediaFoundation.ResourceCharacteristics"/>
    <bind from="MFARGB" to="SharpDX.ColorBGRA"/>
  </bindings>

  <mapping>
    <context id="mediafoundation-all"/>
    <!--
    // *****************************************************************
    // MediaFoundation Enumerations
    // *****************************************************************
    -->
    <map enum="MF(.*)" name-tmp="$1"/>

    <remove enum-item=".*_Mask"/>

    <map enum="#MF_RESOLUTION_MEDIASOURCE" name="SourceResolverFlags" none="true" flags="true"/>
    <map enum-item="MF_RESOLUTION_(.*)" name-tmp="$1"/>

    <map enum="#MF_ACTIVATE_CUSTOM_MIXER_ALLOWFAIL" name="ActivateCustomMixerFlags" none="true" flags="true"/>
    <map enum-item="MF_ACTIVATE_CUSTOM_MIXER_ALLOWFAIL" name="AllowFail"/>

    <map enum="#MF_ACTIVATE_CUSTOM_PRESENTER_ALLOWFAIL" name="ActivateCustomPresenterFlags" none="true" flags="true"/>
    <map enum-item="MF_ACTIVATE_CUSTOM_PRESENTER_ALLOWFAIL" name="AllowFail"/>

    <map enum="#MEUnknown" name="MediaEventTypes"/>
    <map enum-item="ME(.*)" name-tmp="$1"/>
    <map enum-item="MEWMDRM(.*)" name-tmp="WindowsMediaDRM$1"/>
    <remove enum="MEReservedMax"/>

    <map enum="#MF_SOURCE_READER_INVALID_STREAM_INDEX" name="SourceReaderIndex"/>
    <map enum-item="MF_SOURCE_READER_(.*)" name-tmp="$1"/>

    <map enum-item="MF_SOURCE_READERF_(.*)" name-tmp="$1"/>

    <map enum="#MF_SINK_WRITER_INVALID_STREAM_INDEX" name="SinkWriterIndex"/>
    <map enum-item="MF_SINK_WRITER_(.*)" name-tmp="$1"/>

    <map enum-item="MFNominalRange_([0-9].*)" name="Range$1"/>

    <map enum-item="MFVideoSrcContentHintFlag_16x9" name="Hint16x9"/>
    <map enum-item="MFVideoSrcContentHintFlag_235_1" name="Hint235_1"/>

    <map enum="MF2DBuffer_LockFlags" name="Buffer2DLockFlags"/>
    <remove enum-item="MF2DBuffer_LockFlags_ForceDWORD"/>

    <map enum="MF3DVideoOutputType" name="Video3DOutputType"/>

    <!--
    // *****************************************************************
    // MediaFoundation Structures
    // *****************************************************************
    -->
    <map struct="MF(.*)" name-tmp="$1"/>

    <map struct="MFVideoSurfaceInfo" marshalto="true"/>

    <map enum-item="MFVideoRotationFormat_(.*)" name="Angle$1"/>

    <!--
    // *****************************************************************
    // MediaFoundation Interfaces
    // *****************************************************************
    -->
    <map interface="IMF(.*)" name="$1"/>
    <remove inteface="MFASYNCRESULT" />
    
    <map interface="IDMOQualityControl" name="QualityControl"/>
    <map interface="IDMOVideoOutputOptimizations" name="VideoOutputOptimizations"/>

    <map interface="IEVR(.*)" name="$1"/>

    <map interface="IMFGetService" name="ServiceProvider"/>
    <map interface="IMFShutdown" name="Shutdownable"/>
    <map interface="IMF2DBuffer" name="Buffer2D"/>
    <map interface="IMF2DBuffer2" name="Buffer2D2"/>

    <map param="IMFRateControl::GetRate::pfThin" attribute="out" return="true"/>
    <map param="IMFRateControl::GetRate::pflRate" attribute="out"/>

    <map method="IMFMediaEngineProtectedContent::SetContentProtectionManager" visibility="internal"/>
    <map param="IMFMediaEngineProtectedContent::SetContentProtectionManager::pCPM" type="void"/>

    <map interface="IMFAttributes" name="MediaAttributes"/>
    <map method="IMFAttributes::GetItem" visibility="internal"/>
    <map param="IMFAttributes::GetItem::pValue" attribute="in" type="void"/>
    <map param="IMFAttributes::GetItemType::pType" return="true"/>

    <map method="IMFAttributes::CompareItem" visibility="internal"/>
    <map param="IMFAttributes::CompareItem::pbResult" return="true"/>

    <map param="IMFAttributes::Compare::pbResult" return="true"/>

    <map method="IMFAttributes::GetUINT32" visibility="internal"/>
    <map method="IMFAttributes::GetUINT32" name="GetInt"/>
    <map param="IMFAttributes::GetUINT32::punValue" return="true"/>

    <map method="IMFAttributes::GetUINT64" visibility="internal"/>
    <map method="IMFAttributes::GetUINT64" name="GetLong"/>
    <map param="IMFAttributes::GetUINT64::punValue" return="true"/>

    <map method="IMFAttributes::GetDouble" visibility="internal"/>
    <map method="IMFAttributes::GetGUID" visibility="internal"/>
    <map param="IMFAttributes::GetDouble::pfValue" return="true"/>
    <map param="IMFAttributes::GetGUID::pguidValue" return="true"/>

    <map method="IMFAttributes::GetString.*" visibility="internal"/>
    <map method="IMFAttributes::GetAllocatedString" visibility="internal"/>
    <map param="IMFAttributes::GetStringLength::pcchLength" return="true"/>

    <map method="IMFAttributes::GetBlob.*" visibility="internal"/>
    <map method="IMFAttributes::GetAllocatedBlob" visibility="internal"/>
    <map param="IMFAttributes::GetBlob::pBuf" type="void" attribute="in"/>
    <map param="IMFAttributes::GetBlobSize::pcbBlobSize" return="true"/>
    <map method="IMFAttributes::SetBlob"    visibility="internal" />
    <map param="IMFAttributes::SetBlob::pBuf" type="void" attribute="in"/>

    <map method="IMFAttributes::GetUnknown" visibility="internal"/>

    <map method="IMFAttributes::SetItem"    name="Set" visibility="internal" />
    <map method="IMFAttributes::SetUINT32"  name="Set" visibility="internal" />
    <map method="IMFAttributes::SetUINT64"  name="Set" visibility="internal" />
    <map method="IMFAttributes::SetDouble"  name="Set" visibility="internal" />
    <map method="IMFAttributes::SetGUID"    name="Set" visibility="internal" />
    <map method="IMFAttributes::SetString"  name="Set" visibility="internal" />
    <map method="IMFAttributes::SetUnknown" name="Set" visibility="internal" />

    <map method="IMFAttributes::GetItemByIndex" visibility="internal"/>

    <map method="IMFMediaEngineClassFactory::Create.*" visibility="internal"/>
    <map param="IMFMediaEngineClassFactory::Create.*::pp.*" attribute="fast out"/>

    <map param="IMFMediaEngineClassFactory::CreateInstance::dwFlags" type="MF_MEDIA_ENGINE_CREATEFLAGS" name="flags"/>

    <map interface="IMFMediaEngineNotify" callback="true" visibility="internal"/>

    <map method="IMFDXGIDeviceManager::ResetDevice" visibility="internal"/>
    <map param="IMFDXGIDeviceManager::OpenDeviceHandle::phDevice" return="true"/>
    <map method="IMFDXGIDeviceManager::UnlockDevice" visibility="internal"/>
    <map param="IMFDXGIDeviceManager::LockDevice::ppUnkDevice" return="true"/>
    <map param="IMFDXGIDeviceManager::GetVideoService::ppService" return="true"/>

    <map interface="IMFByteStream" name="IByteStream" callback-visibility="public" callback="true" callback-dual="true" callback-name="ByteStream"/>

    <map param="IMFByteStream::*.*::pb" type="void" attribute="in"/>

    <map param="IMFByteStream::Begin[RW].*::punkState" type="void"/>

    <map param="IMFMediaEngineEx::GetResourceCharacteristics::pCharacteristics" type="RESOURCE_CHARACTERISTICS"/>

    <map method="IMFMediaEngine::OnVideoStreamTick" name="OnVideoStreamTick_" check="false" visibility="internal"/>

    <map param="IMFMediaEngineEx::SetSourceFromByteStream::pURL" type="void"/>

    <map method="IMFAsyncResult::GetStatus" return="true" check="false"/>

    <map method="IMFMediaError::GetExtendedErrorCode" check="false"/>

    <map param="IMFSourceReader::.*::pp.*" return="true"/>

    <map method="IMFSourceReader::SetCurrentMediaType" visibility="internal"/>
    <map param="IMFSourceReader::SetCurrentMediaType::pdwReserved" type="void"/>

    <map param="IMFSourceReader::ReadSample::dwControlFlags" type="MF_SOURCE_READER_CONTROL_FLAG"/>
    <map param="IMFSourceReader::ReadSample::pdwStreamFlags" type="MF_SOURCE_READER_FLAG"/>

    <map param="IMFSourceReader::GetPresentationAttribute::pvarAttribute" return="true"/>

    <map method="IMFSourceReader::SetCurrentPosition" visibility="internal"/>

    <map param="IMFSample::.*::pp.*" return="true"/>

    <map param="IMFMediaBuffer::Lock::ppbBuffer" type="void" attribute="out" return="true"/>



    <!--
    // *****************************************************************
    // MediaFoundation Functions
    // *****************************************************************
    -->
    <remove function="IMF.*"/>
    <remove function="BSTR_.*"/>
    <remove function="HWND_.*"/>
    <remove function="LPSAFEARRAY_.*"/>

    <map param="MFCreateSourceReader.*::pp.*" attribute="out fast"/>
    
    <!-- Remove some functions with unsupported structs -->
    <remove function="MFInitMediaTypeFromVideoInfoHeader" />
    <remove function="MFInitMediaTypeFromMPEG1VideoInfo" />
    <remove function="MFInitMediaTypeFromVideoInfoHeader2" />
    <remove function="MFInitMediaTypeFromAMMediaType" />
    <remove function="MFInitMediaTypeFromVideoInfoHeader" />
    <remove function="MFInitMediaTypeFromMPEG2VideoInfo" />
    <remove function="MFInitAMMediaTypeFromMFMediaType" />
    <remove function="MFCreateAMMediaTypeFromMFMediaType"/>

    <ifdef name="W8CORE">
      <remove function="MFCreateAggregateSource"/>
      <remove function="MFCreateProtectedEnvironmentAccess"/>
      <remove function="MFCreateSinkWriterFromMediaSink"/>
      <remove function="MFCreateSinkWriterFromURL"/>
      <remove function="MFGetLocalId"/>
      <remove function="MFGetService"/>
      <remove function="MFGetSystemId"/>
      <remove function="MFLoadSignedLibrary"/>
    </ifdef>

    <ifdef name="WP8">
      <remove function="MFInitAttributesFromBlob"/>
    </ifdef>

    <map param="MFCreateAttributes::ppMFAttributes" attribute="out fast"/>
    <map param="MFCreateDXGIDeviceManager::ppDeviceManager" attribute="out fast"/>
    <map param="MFCreateMFByteStreamOnStreamEx::ppByteStream" attribute="out fast"/>

    <map function="MFAddPeriodicCallback" visibility="internal"/>

    <map function="MF(.*)" name-tmp="$1"/>
    <map function="MF.*" dll='"Mfplat.dll"' group="SharpDX.MediaFoundation.MediaFactory"/>
    <map function="Create.*" dll='"Temp.dll"' group="SharpDX.MediaFoundation.MediaFactory"/>

    <map function="MFCreateSourceReader.*" dll='"Mfreadwrite.dll"'/>

    <map function="MFCreateWaveFormatExFromMFMediaType" visibility="internal"/>
    <map param="MFCreateWaveFormatExFromMFMediaType::ppWF" type="void"/>
    
    <map param="MFCreateMediaType::ppMFType" attribute="out fast"/>

    <map function="MFTranscodeGetAudioOutputAvailableTypes" dll='"mf.dll"'/>
    <map function="MFShutdownObject" dll='"mf.dll"'/>
    <map function="MFRR_CreateActivate" dll='"mf.dll"'/>
    <map function="MFRequireProtectedEnvironment" dll='"mf.dll"'/>
    <map function="MFReadSequencerSegmentOffset" dll='"mf.dll"'/>
    <map function="MFLoadSignedLibrary" dll='"mf.dll"'/>
    <map function="MFGetTopoNodeCurrentType" dll='"mf.dll"'/>
    <map function="MFGetSystemId" dll='"mf.dll"'/>
    <map function="MFGetSupportedSchemes" dll='"mf.dll"'/>
    <map function="MFGetSupportedMimeTypes" dll='"mf.dll"'/>
    <map function="MFGetService" dll='"mf.dll"'/>
    <map function="MFGetMultipleServiceProviders" dll='"mf.dll"'/>
    <map function="MFGetLocalId" dll='"mf.dll"'/>
    <map function="MFEnumDeviceSources" dll='"mf.dll"'/>
    <map function="MFCreateWMVEncoderActivate" dll='"mf.dll"'/>
    <map function="MFCreateWMAEncoderActivate" dll='"mf.dll"'/>
    <map function="MFCreateVideoRendererActivate" dll='"mf.dll"'/>
    <map function="MFCreateVideoRenderer" dll='"mf.dll"'/>
    <map function="MFCreateUrlmonSchemePlugin" dll='"mf.dll"'/>
    <map function="MFCreateTranscodeTopologyFromByteStream" dll='"mf.dll"'/>
    <map function="MFCreateTranscodeTopology" dll='"mf.dll"'/>
    <map function="MFCreateTranscodeSinkActivate" dll='"mf.dll"'/>
    <map function="MFCreateTranscodeProfile" dll='"mf.dll"'/>
    <map function="MFCreateTopologyNode" dll='"mf.dll"'/>
    <map function="MFCreateTopology" dll='"mf.dll"'/>
    <map function="MFCreateTopoLoader" dll='"mf.dll"'/>
    <map function="MFCreateStandardQualityManager" dll='"mf.dll"'/>
    <map function="MFCreateSourceResolver" dll='"mf.dll"'/>
    <map function="MFCreateSoundEventSchemePlugin" dll='"mf.dll"'/>
    <map function="MFCreateSimpleTypeHandler" dll='"mf.dll"'/>
    <map function="MFCreateSequencerSourceRemoteStream" dll='"mf.dll"'/>
    <map function="MFCreateSequencerSource" dll='"mf.dll"'/>
    <map function="MFCreateSequencerSegmentOffset" dll='"mf.dll"'/>
    <map function="MFCreateSecureHttpSchemePlugin" dll='"mf.dll"'/>
    <map function="MFCreateSampleGrabberSinkActivate" dll='"mf.dll"'/>
    <map function="MFCreateSampleCopierMFT" dll='"mf.dll"'/>
    <map function="MFCreateSAMIByteStreamPlugin" dll='"mf.dll"'/>
    <map function="MFCreateRemoteDesktopPlugin" dll='"mf.dll"'/>
    <map function="MFCreateProxyLocator" dll='"mf.dll"'/>
    <map function="MFCreateProtectedEnvironmentAccess" dll='"mf.dll"'/>
    <map function="MFCreatePresentationDescriptorFromASFProfile" dll='"mf.dll"'/>
    <map function="MFCreatePresentationClock" dll='"mf.dll"'/>
    <map function="MFCreatePMPServer" dll='"mf.dll"'/>
    <map function="MFCreatePMPMediaSession" dll='"mf.dll"'/>
    <map function="MFCreatePMPHost" dll='"mf.dll"'/>
    <map function="MFCreateNSCByteStreamPlugin" dll='"mf.dll"'/>
    <map function="MFCreateNetSchemePlugin" dll='"mf.dll"'/>
    <map function="MFCreateMuxSink" dll='"mf.dll"'/>
    <map function="MFCreateMPEG4MediaSink" dll='"mf.dll"'/>
    <map function="MFCreateMP3MediaSink" dll='"mf.dll"'/>
    <map function="MFCreateMP3ByteStreamPlugin" dll='"mf.dll"'/>
    <map function="MFCreateMediaSession" dll='"mf.dll"'/>
    <map function="MFCreateMediaProcessor" dll='"mf.dll"'/>
    <map function="MFCreateLPCMByteStreamPlugin" dll='"mf.dll"'/>
    <map function="MFCreateHttpSchemePlugin" dll='"mf.dll"'/>
    <map function="MFCreateFMPEG4MediaSink" dll='"mf.dll"'/>
    <map function="MFCreateFileSchemePlugin" dll='"mf.dll"'/>
    <map function="MFCreateFileBlockMap" dll='"mf.dll"'/>
    <map function="MFCreateDrmNetNDSchemePlugin" dll='"mf.dll"'/>
    <map function="MFCreateDeviceSourceActivate" dll='"mf.dll"'/>
    <map function="MFCreateDeviceSource" dll='"mf.dll"'/>
    <map function="MFCreateCredentialCache" dll='"mf.dll"'/>
    <map function="MFCreateCacheManager" dll='"mf.dll"'/>
    <map function="MFCreateByteCacheFile" dll='"mf.dll"'/>
    <map function="MFCreateAudioRendererActivate" dll='"mf.dll"'/>
    <map function="MFCreateAudioRenderer" dll='"mf.dll"'/>
    <map function="MFCreateASFStreamSelector" dll='"mf.dll"'/>
    <map function="MFCreateASFStreamingMediaSinkActivate" dll='"mf.dll"'/>
    <map function="MFCreateASFStreamingMediaSink" dll='"mf.dll"'/>
    <map function="MFCreateASFSplitter" dll='"mf.dll"'/>
    <map function="MFCreateASFProfileFromPresentationDescriptor" dll='"mf.dll"'/>
    <map function="MFCreateASFProfile" dll='"mf.dll"'/>
    <map function="MFCreateASFMultiplexer" dll='"mf.dll"'/>
    <map function="MFCreateASFMediaSinkActivate" dll='"mf.dll"'/>
    <map function="MFCreateASFMediaSink" dll='"mf.dll"'/>
    <map function="MFCreateASFIndexerByteStream" dll='"mf.dll"'/>
    <map function="MFCreateASFIndexer" dll='"mf.dll"'/>
    <map function="MFCreateASFContentInfo" dll='"mf.dll"'/>
    <map function="MFCreateASFByteStreamPlugin" dll='"mf.dll"'/>
    <map function="MFCreateAppSourceProxy" dll='"mf.dll"'/>
    <map function="MFCreateAggregateSource" dll='"mf.dll"'/>
    <map function="MFCreateADTSMediaSink" dll='"mf.dll"'/>
    <map function="MFCreateAC3MediaSink" dll='"mf.dll"'/>
    <map function="MFCreate3GPMediaSink" dll='"mf.dll"'/>
    <map function="MergePropertyStore" dll='"mf.dll"'/>
    <map function="ExtractPropVariant" dll='"mf.dll"'/>
    <map function="DllGetClassObject" dll='"mf.dll"'/>
    <map function="DllGetActivationFactory" dll='"mf.dll"'/>
    <map function="DllCanUnloadNow" dll='"mf.dll"'/>
    <map function="CreateNamedPropertyStore" dll='"mf.dll"'/>
    <map function="CopyPropertyStore" dll='"mf.dll"'/>
    <map function="ConvertPropVariant" dll='"mf.dll"'/>
    <map function="AppendPropVariant" dll='"mf.dll"'/>    

    <context-clear />
  </mapping>
</config>